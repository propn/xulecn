package com.ztesoft.common.dao;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

import com.ztesoft.common.util.CrmConstants;
import com.ztesoft.common.util.CrmParamsConfig;
import com.ztesoft.common.util.JNDINames;

//public class MyStatement implements PreparedStatement{
public class MyStatement {
	private PreparedStatement state ;
	private String sql = "";
	private String classname = "";

	public String getSql() {
		return sql;
	}

	public void setSql(String sql) {
		this.sql = sql;
	}

	public MyStatement(PreparedStatement state)
	{
		this.state=state;
	}
	
	public void addBatch() throws SQLException {
		state.addBatch();
	}

	public void addBatch(String sql) throws SQLException {
		state.addBatch(sql);
	}

	public void cancel() throws SQLException {
		state.cancel();
	}

	public void clearBatch() throws SQLException {
		state.clearBatch();
	}

	public void clearParameters() throws SQLException {
		state.clearParameters();
	}

	public void clearWarnings() throws SQLException {
		state.clearWarnings();
	}

	public void close() throws SQLException {
		state.close();
	}

	public boolean execute() throws SQLException {
		return state.execute();
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return state.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return state.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return state.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		return state.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		return state.executeBatch();
	}

	public ResultSet executeQuery() throws SQLException {
		long begin = System.currentTimeMillis();
		ResultSet rs = state.executeQuery();
		logexecute(begin);
		return rs;
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		long begin = System.currentTimeMillis();
		ResultSet rs=state.executeQuery(sql);
		logexecute(begin);
		return rs;
	}

	public int executeUpdate() throws SQLException {
		long begin = System.currentTimeMillis();
		int i=state.executeUpdate();
		logexecute(begin);
		return i; 
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		long begin = System.currentTimeMillis();
		int i=state.executeUpdate(sql, autoGeneratedKeys);
		logexecute(begin);
		return i;
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		long begin = System.currentTimeMillis();
		int i=state.executeUpdate(sql, columnIndexes);
		logexecute(begin);
		return i;
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		long begin = System.currentTimeMillis();
		int i=state.executeUpdate(sql, columnNames);
		logexecute(begin);
		return i;
	}

	public int executeUpdate(String sql) throws SQLException {
		long begin = System.currentTimeMillis();
		int i=state.executeUpdate(sql);
		logexecute(begin);
		return i;
	}

	public Connection getConnection() throws SQLException {
		return state.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return state.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return state.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return state.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return state.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return state.getMaxRows();
	}

	public ResultSetMetaData getMetaData() throws SQLException {
		return state.getMetaData();
	}

	public boolean getMoreResults() throws SQLException {
		return state.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return state.getMoreResults(current);
	}

	public ParameterMetaData getParameterMetaData() throws SQLException {
		return state.getParameterMetaData();
	}

	public int getQueryTimeout() throws SQLException {
		return state.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return state.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return state.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return state.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return state.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return state.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return state.getWarnings();
	}

	public void setArray(int i, Array x) throws SQLException {
		state.setArray(i, x);
	}

	public void setAsciiStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		state.setAsciiStream(parameterIndex, x, length);
	}

	public void setBigDecimal(int parameterIndex, BigDecimal x)
			throws SQLException {
		state.setBigDecimal(parameterIndex, x);
	}

	public void setBinaryStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		state.setBinaryStream(parameterIndex, x, length);
	}

	public void setBlob(int i, Blob x) throws SQLException {
		state.setBlob(i, x);
	}

	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		state.setBoolean(parameterIndex, x);
	}

	public void setByte(int parameterIndex, byte x) throws SQLException {
		state.setByte(parameterIndex, x);
	}

	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		state.setBytes(parameterIndex, x);
	}

	public void setCharacterStream(int parameterIndex, Reader reader, int length)
			throws SQLException {
		state.setCharacterStream(parameterIndex, reader, length);
	}

	public void setClob(int i, Clob x) throws SQLException {
		state.setClob(i, x);
	}

	public void setCursorName(String name) throws SQLException {
		state.setCursorName(name);
	}

	public void setDate(int parameterIndex, Date x, Calendar cal)
			throws SQLException {
		state.setDate(parameterIndex, x, cal);
	}

	public void setDate(int parameterIndex, Date x) throws SQLException {
		state.setDate(parameterIndex, x);
	}

	public void setDouble(int parameterIndex, double x) throws SQLException {
		state.setDouble(parameterIndex, x);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		state.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		state.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		state.setFetchSize(rows);
	}

	public void setFloat(int parameterIndex, float x) throws SQLException {
		state.setFloat(parameterIndex, x);
	}

	public void setInt(int parameterIndex, int x) throws SQLException {
		state.setInt(parameterIndex, x);
	}

	public void setLong(int parameterIndex, long x) throws SQLException {
		state.setLong(parameterIndex, x);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		state.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		state.setMaxRows(max);
	}

	public void setNull(int paramIndex, int sqlType, String typeName)
			throws SQLException {
		state.setNull(paramIndex, sqlType, typeName);
	}

	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		state.setNull(parameterIndex, sqlType);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType,
			int scale) throws SQLException {
		state.setObject(parameterIndex, x, targetSqlType, scale);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType)
			throws SQLException {
		state.setObject(parameterIndex, x, targetSqlType);
	}

	public void setObject(int parameterIndex, Object x) throws SQLException {
		state.setObject(parameterIndex, x);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		state.setQueryTimeout(seconds);
	}

	public void setRef(int i, Ref x) throws SQLException {
		state.setRef(i, x);
	}

	public void setShort(int parameterIndex, short x) throws SQLException {
		state.setShort(parameterIndex, x);
	}

	public void setString(int parameterIndex, String x) throws SQLException {
		state.setString(parameterIndex, x);
	}

	public void setTime(int parameterIndex, Time x, Calendar cal)
			throws SQLException {
		state.setTime(parameterIndex, x, cal);
	}

	public void setTime(int parameterIndex, Time x) throws SQLException {
		state.setTime(parameterIndex, x);
	}

	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
			throws SQLException {
		state.setTimestamp(parameterIndex, x, cal);
	}

	public void setTimestamp(int parameterIndex, Timestamp x)
			throws SQLException {
		state.setTimestamp(parameterIndex, x);
	}

	public void setUnicodeStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		state.setUnicodeStream(parameterIndex, x, length);
	}

	public void setURL(int parameterIndex, URL x) throws SQLException {
		state.setURL(parameterIndex, x);
	}

	private void logexecute(long begin) throws SQLException
	{
		long end =  System.currentTimeMillis();
		long exetime = end-begin;
		
		String logexetime="1000";
		
		String logexetime1= CrmParamsConfig.getInstance().getParamValue("LOG_SQL_EXE_TIME");
		if(logexetime1!=null&&!"".equals(logexetime1)){
			logexetime = logexetime1;
		}
		
		long l_logexetime = Long.parseLong(logexetime);
		
		if(exetime>=l_logexetime)
		{
			Connection conn = null;
			PreparedStatement stmt = null;
			try {
				String sql ="insert into monitor_sql(exe_time,exe_sql,time_lenth,exe_class ) values("+DatabaseFunction.current()+",?,?,?)";
	
				conn = DAOUtils.getDBConnection(JNDINames.CRM_DATASOURCE);
				stmt = conn.prepareStatement(DAOSQLUtils.getFilterSQL(sql));
				stmt.setString(1, this.getSql());
				stmt.setString(2, exetime+"");
				stmt.setString(3, this.getClassname());
				int rows = stmt.executeUpdate();
			} catch (SQLException se) {
				se.printStackTrace();
			} finally {
				
				DAOUtils.closeStatement(stmt, this);
				DAOUtils.closeConnection(conn, this);
			}
		}
	}

	public String getClassname() {
		return classname;
	}

	public void setClassname(String classname) {
		this.classname = classname;
	}
//
//	public void setRowId(int parameterIndex, RowId x) throws SQLException {
//		// TODO Auto-generated method stub
//		
//	}

	public void setNString(int parameterIndex, String value) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

//	public void setNClob(int parameterIndex, NClob value) throws SQLException {
//		// TODO Auto-generated method stub
//		
//	}

	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

//	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
//		// TODO Auto-generated method stub
//		
//	}

	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public Object unwrap(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isWrapperFor(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}
	
}
