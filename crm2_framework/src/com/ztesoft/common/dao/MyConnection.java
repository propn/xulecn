package com.ztesoft.common.dao;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;

//modify by easonwu 2009-12-09 buffalo2.0
public class MyConnection  {
	private Connection con ;
	private String classname="";

	public String getClassname() {
		return classname;
	}

	public void setClassname(String classname) {
		this.classname = classname;
	}

	public MyConnection(Connection con)
	{
		this.con=con;
	}
	
	public void clearWarnings() throws SQLException {
		con.clearWarnings();
	}

	public void close() throws SQLException {
		con.close();
	}

	public void commit() throws SQLException {
		con.commit();
	}

	public Statement createStatement() throws SQLException {
		return con.createStatement();
	}

	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return con.createStatement(resultSetType, resultSetConcurrency,
				resultSetHoldability);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {
		return con.createStatement(resultSetType, resultSetConcurrency);
	}

	public boolean getAutoCommit() throws SQLException {
		return con.getAutoCommit();
	}

	public String getCatalog() throws SQLException {
		return con.getCatalog();
	}

	public int getHoldability() throws SQLException {
		return con.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		return con.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException {
		return con.getTransactionIsolation();
	}

	public Map getTypeMap() throws SQLException {
		return con.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException {
		return con.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return con.isClosed();
	}

	public boolean isReadOnly() throws SQLException {
		return con.isReadOnly();
	}

	public String nativeSQL(String sql) throws SQLException {
		return con.nativeSQL(sql);
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		return con.prepareCall(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability);
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return con.prepareCall(sql, resultSetType, resultSetConcurrency);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		return con.prepareCall(sql);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
//		MyStatement mystmt = new MyStatement(con.prepareStatement(sql, resultSetType, resultSetConcurrency,
//				resultSetHoldability));
//		mystmt.setSql(sql);
//		mystmt.setClassname(this.getClassname());
//		return mystmt;
		return null ;
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
//		MyStatement mystmt = new MyStatement(con.prepareStatement(sql, resultSetType, resultSetConcurrency));
//		mystmt.setSql(sql);
//		mystmt.setClassname(this.getClassname());
//		return mystmt;
		return null ;
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
//		MyStatement mystmt = new MyStatement(con.prepareStatement(sql, autoGeneratedKeys));
//		mystmt.setSql(sql);
//		mystmt.setClassname(this.getClassname());
//		return mystmt;
		return null ;
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
//		MyStatement mystmt = new MyStatement(con.prepareStatement(sql, columnIndexes));
//		mystmt.setSql(sql);
//		mystmt.setClassname(this.getClassname());
//		
//		return mystmt;
		return null ;
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
//		MyStatement mystmt = new MyStatement(con.prepareStatement(sql, columnNames));
//		mystmt.setSql(sql);
//		mystmt.setClassname(this.getClassname());
//		
//		return mystmt;
		return null ;
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		
//		MyStatement mystmt = new MyStatement(con.prepareStatement(sql));
//		mystmt.setSql(sql);
//		mystmt.setClassname(this.getClassname());
//		return mystmt;
		return null ;
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		con.releaseSavepoint(savepoint);
	}

	public void rollback() throws SQLException {
		con.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		con.rollback(savepoint);
	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		con.setAutoCommit(autoCommit);
	}

	public void setCatalog(String catalog) throws SQLException {
		con.setCatalog(catalog);
	}

	public void setHoldability(int holdability) throws SQLException {
		con.setHoldability(holdability);
	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		con.setReadOnly(readOnly);
	}

	public Savepoint setSavepoint() throws SQLException {
		return con.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return con.setSavepoint(name);
	}

	public void setTransactionIsolation(int level) throws SQLException {
		con.setTransactionIsolation(level);
	}

	public void setTypeMap(Map arg0) throws SQLException {
		con.setTypeMap(arg0);
	}

	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

//	public NClob createNClob() throws SQLException {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	public SQLXML createSQLXML() throws SQLException {
//		// TODO Auto-generated method stub
//		return null;
//	}

	public boolean isValid(int timeout) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

//	public void setClientInfo(String name, String value) throws SQLClientInfoException {
//		// TODO Auto-generated method stub
//		
//	}
//
//	public void setClientInfo(Properties properties) throws SQLClientInfoException {
//		// TODO Auto-generated method stub
//		
//	}

	public String getClientInfo(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Object unwrap(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isWrapperFor(Class arg0) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}
	
}
