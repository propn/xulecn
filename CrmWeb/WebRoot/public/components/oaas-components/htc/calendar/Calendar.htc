<!-- ************************************************************	
    日历控件 ：包含 日期 和 时间 (控件生成时，默认的值，为当前的日期和时间)
    --------------------------------------------------------------------------------
	[属性]：	
			useDate : 设置【日期】是否可见，默认可见，(true/false)，如 id.useDate = false
					  返回【日期】的当前状态, 如 id.useDate
					  
			useTime : 设置【时间】是否可见，默认可见，(true/false)，如 id.useTime = false
					  返回【时间】的当前状态, 如 id.useTime			
					  
			curDate : 设置【日期】的当前值(右值为字符串，格式为"YYYY-MM-DD")，如 id.curDate = "1949-10-01"
			          返回【日期】的当前值(返回值为字符串，格式"YYYY-MM-DD"), 如 id.curDate

			curTime : 设置【时间】的当前值(右值为字符串，格式为"HH:MI:SS")，如 id.curTime = "10:01:00"
			          返回【时间】的当前值(返回值为字符串，格式"HH:MI:SS"), 如 id.curTime 			          			
	--------------------------------------------------------------------------------
	[方法]：
		 setValue(v): 设置整个【日历控件】的时间，有一个输入参数，类型为字符串
					  输入格式："YYYY-MM-DD HH:MI:SS"，或"YYYY-MM-DD" ,或"HH:MI:SS"
					  若只有日期，没有时间，时间被设置为 "00:00:00"
					  若只有时间，没有日期，日期被设置为 "1970-01-01" (JavaScript默认的起始日期)
					  如：var v="1949-10-01 10:01:00";
						  id.setValue(v);
						  
			getValue：返回整个【日历控件】的时间，返回值为字符串
					  返回值格式："YYYY-MM-DD HH:MI:SS"，或"YYYY-MM-DD" ,或"HH:MI:SS"
					  若只有日期可见，只返回日期，没有时间
					  若只有时间可见，只返回时间，没有日期
					  如：var v=id.getValue();
					  
		  setDisplay：使整个【日历控件】可见，与属性 useDate、useTime 相关
					  如：id.setDisplay();
	--------------------------------------------------------------------------------
	[事件]：
		   onchanged：在整个【日历控件】失去焦点时，触发；
		   （注：失去焦点后，如要让控件不可见，可通过外围的对象进行控制，如 table1.style.display="none";）
	--------------------------------------------------------------------------------		   
     ************************************************************ -->
<html>
<head>
<public:component tagName="Calendar">
<public:defaults viewLinkContent/>
<public:attach event=ondocumentready onevent="initLoad()" />

<public:property name="useDate" get="getUseDate" put="putUseDate" />
<public:property name="useTime" get="getUseTime" put="putUseTime" />
<public:property name="curDate" get="getCurDate" put="putCurDate" />
<public:property name="curTime" get="getCurTime" put="putCurTime" />
<public:property name="webroot" put="setWebRoot" />
<public:property name="weblanguage" put="setWebLanguage" />
<public:attach event="onblur" for="element" ONEVENT="onBlurCldr()" />
<public:event name="oncalendardblclick" id="_evtdblclick" />
<public:event name="onchanged" id="_evtonchanged" />
<public:method name="setValue" />
<public:method name="getValue" />
<public:method name="setDisplay" />
<public:method name="init" />
</public:component>
<style type="text/css">
.m_fieldset {
	padding: 0,10,5,10;
	text-align: center;
	width: 150px;
}
.m_legend {
	font-family: Tahoma;
	font-size: 8pt;
	padding-bottom: 5px;
}
.m_frameborder {
	border : 1px solid #88BDE8;
	width: 100px;
	height: 19px;
	background-color: #FFFFFF;
	overflow: hidden;
	text-align: right;
	font-family: "Tahoma";
	font-size: 10px;
}
.m_arrow {
	width: 16px;
	height: 8px;
	font-family: "Webdings";
	font-size: 8pt;
	line-height: 2px;
	padding-left: 2px;
	cursor: hand;
}
.m_input {
	width: 18px;
	height: 14px;
	border: 0px solid black;
	font-family: "Tahoma";
	font-size: 8pt;
	text-align: right;
	ime-mode:disabled;
}
body {
	background-color: #E1F1FD;
}
.c_fieldset {
	padding: 0,10,5,10;
	text-align: center;
	width: 180px;
}
.c_legend {
	font-family: Tahoma;
	font-size: 11px;
	padding-bottom: 5px;
}
.c_frameborder {
	border : 1px solid #88BDE8;
	background-color: #FFFFFF;
	overflow: hidden;
	font-family: "Tahoma";
	font-size: 8pt;
	width:160px;
	height:120px;
}
.c_frameborder td {
	width: 23px;
	height: 16px;
	font-family: "Tahoma";
	font-size: 8pt;
	text-align: center;
	cursor: default;
}
.c_frameborder .selected {
	background-color:#0A246A;
	width:12px;
	height:12px;
	color:white;
}
.c_frameborder span {
	width:12px;
	height:12px;
}
.c_arrow {
	width: 16px;
	height: 8px;
	font-family: "Webdings";
	font-size: 8pt;
	line-height: 2px;
	padding-left: 2px;
	cursor: default;
}
.c_year {
	font-family: "Tahoma";
	font-size: 8pt;
	cursor: default;
	width:55px;
	height:19px;
}
.c_month {
	width:75px;
	height:20px;
	font:8pt "Tahoma";
}
.c_dateHead {
	background-color:#FFF6CD;
	color:#0033CC;
}
</style>
<script language="javascript">

/************************************************************
 函数名称：
 返 回 值：
 函数功能： 
 输入参数：
 输出参数：
 函数说明
 修改记录：
			日期          修改人/拟制人         更改内容
			2004-01-01	  Author1		        初始创建：
           
 ************************************************************/

var LEGEND_DATE_TITLE = "日期(D)";
var LEGEND_TIME_TITLE = "时间(T)";

var MONTH_NAME = ["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"];
var WEEK_NAME  = "<td>日</td><td>一</td><td>二</td><td>三</td><td>四</td><td>五</td><td>六</td>";

 
var useDate= true;
var useTime= true;
var g_webroot;
var g_language="zh-CN";
/************************************************************
 函数名称：trim()
 返 回 值：字符串  
 函数功能：去掉字符串的首尾空格 
 输入参数：无
 输出参数：无 
 函数说明：
          (^\s*)是匹配字符串的最前面所有的空格
          (\s*$)是匹配字符串的最后面所有的空格
          /g是全局匹配    
 ************************************************************/
function String.prototype.trim()
{
    return this.replace(/(^\s*)|(\s*$)/g, "");
}
/************************************************************
 函数名称：parseStrToDate()
 返 回 值：[Date类型数据]
 函数功能：将[日期字符串]转化成[Date类型数据]返回
 输入参数：strdate 
 输出参数： 
 函数说明：输入的字符串可能是
          "1949-10-01 10:01:00"  [日期和时间]
          "1949-10-01"           [日期]
          "10:01:00"             [时间] 
 修改记录：
			日期          修改人/拟制人         更改内容
			2004-04-13	  lin.zhaohua	        初始创建          
 ************************************************************/
function parseStrToDate(strdate)
{
	//去首尾空格
	var strdate1=strdate.trim();
	if  ( strdate1.length == 0 )
	{
	    return new Date(1970,1,1,0,0,0);
	}
	var arr = strdate1.split('-');
	
	if (arr.length == 1)    //只有时间,没有日期 "10:01:00" 
	{
		var arrtime = strdate1.split(':');
		return new Date(1970,1,1,arrtime[0],arrtime[1],arrtime[2]);
	}
	else
	{
		var arr2=arr[2].split(':');  //若"1949-10-01 10:01:00",则arr[2]="01 10:01:00"
		
		if (arr2.length == 1)        //只有日期,没有时间; 前面arr[2]="01"
		{
			return new Date(arr[0],arr[1]-1,arr[2],0,0,0);
		} 
		else    //有日期，有时间
		{
			var arr3=arr[2].split(' ');      //去空格符，取出时间
			var arrtime=arr3[1].split(':');			
			return new Date(arr[0],arr[1]-1,arr3[0],arrtime[0],arrtime[1],arrtime[2]);
		}		
	}
}

function getUseDate()
{   
    //日期控件的"可见"属性
    return useDate;
}
function putUseDate(v)
{   
    //设置日期控件是否可见/可用     
	if (v==0||v=="false")
	{
	    useDate = false;	   
	    document.all["c_fieldset"].style.display = "none";	    
	}
	else 
	{
	    useDate=true;	    
	    document.all["c_fieldset"].style.display = "";
	}		
}

function getUseTime()
{
    //时间控件的"可见"属性
    return useTime;
}
 /************************************************************
 函数名称：checkInt
 函数功能：校验数字

 输入参数：无
 输出参数：无 
 返 回 值：无

 函数说明：

 ************************************************************/
function checkInt(str)
{	
	//检查数据

	var bag = "0123456789";

	for(var i=0; i<str.length; i++)
	{
		var c = str.charAt(i);
		if (bag.indexOf(c) == -1)
		{
			return false;
		}
	}
		
	//首位不能含有“0”,如 0123,0234
	if ( (str - 0) != 0 )
	{
		var index = str.indexOf("0");
		if (index == 0)
		{
			return false;
		}
	}		
	return true;	
}
function putUseTime(v)
{   
    //设置时间控件是否可见/可用     
	if (v==0||v=="false")
	{
	    useTime = false;
	    document.all["m_fieldset"].style.display = "none";
	}
	else 
	{
	    useTime=true;
	    document.all["m_fieldset"].style.display = "";	        
	}		
}

function getValue()
{
    /************************************************************
     控件的当前值，返回值的类型为 string, 和useDate/useTime的属性相关。
     若日期和时间都可见，输出 [日期 时间],中间用空格分开
     若只有日期可见，输出[日期]
     若只有时间可见，输出[时间]    
     ************************************************************/
    var currentDate="";
    
    if (useDate == true)
    {
        currentDate = c.getDate();
        if (useTime == true)
        {
            currentDate += " ";
        }                
    }
    if (useTime == true)
    {
        currentDate += m.getTime();
    }    
    return currentDate;
}
function setValue(v)
{
   /************************************************************
    设置控件的当前值      
    ************************************************************/
    putCurDate(v);
    putCurTime(v);   
}
function getCurDate()
{
    var currentDate;        
    
    if (useDate == true)
    {        
        currentDate = c.getDate();
    }
    else
    {    
        currentDate = "";       
    }         
    return currentDate;    
}

function putCurDate(v)
{
    var currentDate = new Date();    
    currentDate = parseStrToDate(v);
	calendar_year.value = currentDate.getFullYear();
    c.redrawDate();    
    calendar_month.value = currentDate.getMonth()+1;
    c.redrawDate();   
    calendar_dateTable.value = currentDate.getDate(); 
    c.redrawDate(calendar_dateTable.value); 
}
function getCurTime()
{
    var currentDate;        
    
    if (useTime == true)
    {        
        currentDate = m.getTime();
    }
    else
    {    
       currentDate = "";       
    }         
    return currentDate;    
}
function putCurTime(v)
{
    var currentTime = new Date();    
    currentTime = parseStrToDate(v);
    tagHour.value = m.formatTime(currentTime.getHours());
    tagMinute.value = m.formatTime(currentTime.getMinutes());    
    tagSecond.value = m.formatTime(currentTime.getSeconds());    
}
function onBlurCldr()
{      
    //this.style.display="none";  //如要让控件不可见，可通过外围的对象进行控制
    var evt = document.createEventObject();	
	_evtonchanged.fire(evt);
}
function setDisplay()
{      
    this.style.display="";   
}

//	Written by cloudchen, 2004/03/15
function minute(name,fName)
{
	this.name = name;
	this.fName = fName || "m_input";
	this.timer = null;
	this.fObj = null;
	
	this.toString = function()
	{
		var objDate = new Date();
		var sMinute_Common = "class=\"m_input\" maxlength=\"2\" name=\""+this.fName+"\" onfocus=\""+this.name+".setFocusObj(this)\" onblur=\""+this.name+".setTime(this)\" onkeyup=\""+this.name+".prevent(this)\" onkeypress=\"if (!/[0-9]/.test(String.fromCharCode(event.keyCode)))event.keyCode=0\" onpaste=\"return false\" ondragenter=\"return false\"";
		var sButton_Common = "class=\"m_arrow\" onfocus=\"this.blur()\" onmouseup=\""+this.name+".controlTime()\" disabled"
		var str = "";
		str += "<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">"
		str += "<tr>"
		str += "<td>"
		str += "<div class=\"m_frameborder\">"
		str += "<input id=tagHour radix=\"24\" value=\""+this.formatTime(objDate.getHours())+"\" "+sMinute_Common+">:"
		str += "<input id=tagMinute radix=\"60\" value=\""+this.formatTime(objDate.getMinutes())+"\" "+sMinute_Common+">:"
		str += "<input id=tagSecond radix=\"60\" value=\""+this.formatTime(objDate.getSeconds())+"\" "+sMinute_Common+">"
		str += "</div>"
		str += "</td>"
		str += "<td>"
		str += "<table border=\"0\" cellspacing=\"2\" cellpadding=\"0\">"
		str += "<tr><td><button id=\""+this.fName+"_up\" "+sButton_Common+">5</button></td></tr>"
		str += "<tr><td><button id=\""+this.fName+"_down\" "+sButton_Common+">6</button></td></tr>"
		str += "</table>"
		str += "</td>"
		str += "</tr>"
		str += "</table>"	
		return str;
	}
	this.play = function()
	{
		this.timer = setInterval(this.name+".playback()",1000);
	}
	this.formatTime = function(sTime)
	{
		sTime = ("0"+sTime);
		return sTime.substr(sTime.length-2);
	}
	this.playback = function()
	{
		var objDate = new Date();
		var arrDate = [objDate.getHours(),objDate.getMinutes(),objDate.getSeconds()];
		var objMinute = document.getElementsByName(this.fName);
		for (var i=0;i<objMinute.length;i++)
		{
			objMinute[i].value = this.formatTime(arrDate[i])
		}
	}
	this.prevent = function(obj)
	{
		clearInterval(this.timer);
		this.setFocusObj(obj);
		var value = parseInt(obj.value,10);
		var radix = parseInt(obj.radix,10)-1;
		if (obj.value>radix||obj.value<0)
		{
			obj.value = obj.value.substr(0,1);
		}
	}
	this.controlTime = function(cmd)
	{
		event.cancelBubble = true;
		if (!this.fObj) return;
		clearInterval(this.timer);
		var cmd = event.srcElement.innerText=="5"?true:false;
		var i = parseInt(this.fObj.value,10);
		var radix = parseInt(this.fObj.radix,10)-1;
		if (i==radix&&cmd)
		{
			i = 0;
		}
		else if (i==0&&!cmd)
		{
			i = radix;
		}
		else
		{
			cmd?i++:i--;
		}
		this.fObj.value = this.formatTime(i);
		this.fObj.select();
	}
	this.setTime = function(obj)
	{
		obj.value = this.formatTime(obj.value);
	}
	this.setFocusObj = function(obj)
	{
		eval(this.fName+"_up").disabled = eval(this.fName+"_down").disabled = false;
		this.fObj = obj;
	}
	this.getTime = function()
	{
		var arrTime = new Array(2);
		for (var i=0;i<document.getElementsByName(this.fName).length;i++)
		{
			arrTime[i] = document.getElementsByName(this.fName)[i].value;
		}
		return arrTime.join(":");
	}
}

//	Written by cloudchen, 2004/03/16
function calendar(name,fName)
{
	this.name = name;
	this.fName = fName || "calendar";
	this.year = new Date().getFullYear();
	this.month = new Date().getMonth();
	this.date = new Date().getDate();
	//private
	this.toString = function()
	{
		var str = "";
		str += "<table border=\"0\" cellspacing=\"3\" cellpadding=\"0\" onselectstart=\"return false\">";
		str += "<tr>";
		str += "<td>";
		str += this.drawMonth();
		str += "</td>";
		str += "<td align=\"right\">";
		str += this.drawYear();
		str += "</td>";
		str += "</tr>";
		str += "<tr>";
		str += "<td colspan=\"2\">";
		str += "<div class=\"c_frameborder\">";
		str += "<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"c_dateHead\">";
		str += "<tr>";
		//str += "<td>日</td><td>一</td><td>二</td><td>三</td><td>四</td><td>五</td><td>六</td>";
		str += WEEK_NAME;
		str += "</tr>";
		str += "</table>";
		str += this.drawDate();
		str += "</div>";
		str += "</td>";
		str += "</tr>";
		str += "</table>";
		return str;
	}
	//private
	this.drawYear = function()
	{
		var str = "";
		str += "<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">";
		str += "<tr>";
		str += "<td>";
		str += "<input class=\"c_year\" maxlength=\"4\" value=\""+this.year+"\" name=\""+this.fName+"\" id=\""+this.fName+"_year\" onblur=\""+this.name+".vaildate()\">";

		//DateField
		str += "<input type=\"hidden\" name=\""+this.fName+"\" value=\""+this.date+"\" id=\""+this.fName+"_date\">";
		str += "</td>";
		str += "<td>";
		str += "<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\">";
		str += "<tr>";
		str += "<td><button class=\"c_arrow\" onfocus=\"this.blur()\" onclick=\"event.cancelBubble=true;document.getElementById('"+this.fName+"_year').value++;"+this.name+".redrawDate()\">5</button></td>";
		str += "</tr>";
		str += "<tr>";
		str += "<td><button class=\"c_arrow\" onfocus=\"this.blur()\" onclick=\"event.cancelBubble=true;document.getElementById('"+this.fName+"_year').value--;"+this.name+".redrawDate()\">6</button></td>";
		str += "</tr>";
		str += "</table>";
		str += "</td>";
		str += "</tr>";
		str += "</table>";	
		return str;
	}
	this.vaildate=function()
	{
		
		this.year = document.getElementById(this.fName+"_year").value;
		if (!checkInt(this.year))
		{
			alert("年份格式不正确");
			var year = new Date().getYear();
			document.getElementById(this.fName+"_year").value = year;			
			this.redrawDate();
		}		
		else if(parseInt(this.year)<1900||parseInt(this.year)>2100)
		{	
			var year = new Date().getYear();
			document.getElementById(this.fName+"_year").value = year;
			this.redrawDate();
			alert("年份超出范围,正确的年份范围为1900~2100");
		}
		else
		{			
			this.redrawDate();
		}
		
	}
	//priavate
	this.drawMonth = function()
	{
		//var aMonthName = ["一","二","三","四","五","六","七","八","九","十","十一","十二"];
		var str = "";
		str += "<select class=\"c_month\" name=\""+this.fName+"\" id=\""+this.fName+"_month\" onchange=\""+this.name+".redrawDate()\">";
		for (var i=0;i<MONTH_NAME.length;i++) {
			str += "<option value=\""+(i+1)+"\" "+(i==this.month?"selected":"")+">"+MONTH_NAME[i]+"</option>";
		}
		str += "</select>";
			
		return str;		
	}
	//private	
	this.drawDate = function()
	{
		var str = "";
		var fDay = new Date(this.year,this.month,1).getDay();
		var fDate = 1-fDay;
		var lDay = new Date(this.year,this.month+1,0).getDay();
		var lDate = new Date(this.year,this.month+1,0).getDate();
		str += "<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" id=\""+this.fName+"_dateTable"+"\">";
		for (var i=1,j=fDate;i<7;i++)
		{
			str += "<tr>";
			for (var k=0;k<7;k++)
			{
				str += "<td><span id='span"+(isDate(j))+"' "+(j==this.date?" class=\"selected\"":"")+" ondblclick=\"var evt = document.createEventObject();_evtdblclick.fire(evt);\" onclick=\""+this.name+".refreshDate(this.innerText);\">"+(isDate(j++))+"</span></td>";
			}
			str += "</tr>";
		}
		str += "</table>";			
		return str;

		function isDate(n)
		{
			return (n>=1&&n<=lDate)?n:"";
		}
	}
	//public
	this.redrawDate = function(d)
	{
		this.year = document.getElementById(this.fName+"_year").value;
		this.month = document.getElementById(this.fName+"_month").value-1;
		this.date = d || this.date;
		document.getElementById(this.fName+"_year").value = this.year;
		document.getElementById(this.fName+"_month").selectedIndex = this.month;
		document.getElementById(this.fName+"_date").value = this.date;
		if (this.date>new Date(this.year,this.month+1,0).getDate()) 
			this.date = new Date(this.year,this.month+1,0).getDate();				
		document.getElementById(this.fName+"_dateTable").outerHTML = this.drawDate();
	}
	
	//将选中的span选中，其他的重置
	this.refreshDate = function(d)
	{
		this.year = document.getElementById(this.fName+"_year").value;
		this.month = document.getElementById(this.fName+"_month").value-1;
		this.date = d || this.date;
		document.getElementById(this.fName+"_year").value = this.year;
		document.getElementById(this.fName+"_month").selectedIndex = this.month;
		document.getElementById(this.fName+"_date").value = this.date;
		if (this.date>new Date(this.year,this.month+1,0).getDate()) 
			this.date = new Date(this.year,this.month+1,0).getDate();						
		var spans=document.getElementsByTagName("span");
		for (var i=0;i<spans.length;i++)
		{
			if (spans[i].className=="selected")
			{
				spans[i].className="";
				break;
			}
		}
		document.all("span"+d).className='selected';
	}
		
	this.formatDate = function(sDate)
	{
		sDate = ("0"+sDate);
		return sDate.substr(sDate.length-2);
	}
	//public
	this.getDate = function(delimiter)
	{
		if (!delimiter) delimiter = "-";
		
		var sMonth;
		var sDate;
		sMonth = this.formatDate(this.month+1);
		sDate = this.formatDate(this.date);
				
		var aValue = [this.year,sMonth,sDate];		
	  //var aValue = [this.year,(this.month+1),this.date];
		return aValue.join(delimiter);
	}
}

/***设置语言**/
function setWebLanguage(value)
{
	g_language=value;		
}

/****设置路径**************/
function setWebRoot(root)
{
	g_webroot=root;
}
var m;
var c;
	
function initLoad()
{
}

function dateClick()
{
	var b=1;
	alert(b);
}

</script>
</head>
<body>
<table border="0" ID="Table1">
	<tr>
		<td>
			<fieldset id=c_fieldset class="c_fieldset">
			    <legend class="c_legend">Date</legend>
				<!-- 调用日历 -->
				<script id=script3 language=javascript>
					var c = new calendar("c");
					document.write(c);
				</script>
				<!-- 调用日历 -->
			</fieldset>
		</td>
	</tr>
	<tr>
		<td valign="top">
			<fieldset id=m_fieldset class="m_fieldset" style="width:100%">
				<legend class="m_legend">Time</legend>
				<!-- 调用时间钟 -->
				<script id=script4 language=javascript>
					var m = new minute("m");					
					document.write(m);
					//m.play();
				</script>
				<!-- 调用时间钟 -->
			</fieldset>
		</td>
	</tr>
	
</table>
</body>
</html>