控制于视图内
w1.keepInViewport(true);


标题栏文本
win.setText(text);
 
窗体大小
dhxWins.window(id).setDimension(w, h);
var dim = dhxWins.window(id).getDimension(); document.getElementById("res").innerHTML = w + " dimension is (" + dim[0] + ", " + dim[1] + ")";
 
窗体位置
dhxWins.window(id).setPosition(w, h);
var pos = dhxWins.window(id).getPosition(); document.getElementById("res").innerHTML = w + " position is (" + pos[0] + ", " + pos[1] + ")";
 
显示/隐藏窗体
hxWins.window(id).show();
dhxWins.window(id).hide();
alert(dhxWins.window(id).isHidden());
 
启用/禁用拖动大小
dhxWins.window(id).allowResize();
dhxWins.window(id).denyResize();
alert(dhxWins.window(id).isResizable());
 
启用/禁用拖动位置
dhxWins.window(id).allowMove();
dhxWins.window(id).denyMove();
alert(dhxWins.window(id).isMovable());
 
启用/禁用最小化
dhxWins.window(id).allowPark();
dhxWins.window(id).denyPark();
alert(dhxWins.window(id).isParkable());
 
Progress
...
 
居中
dhxWins.window(getId()).center();
dhxWins.window(getId()).centerOnScreen();
 
显示/隐藏标题栏
w2.showHeader();
w2.hideHeader();
 
启用/禁用拖放效果
efName: move,resize.
dhxWins.setEffect(efName, true);
dhxWins.setEffect(efName, false);
alert(dhxWins.getEffect(efName));
 
锁定

dhxWins.window(id).stick();
dhxWins.window(id).unstick();
alert(dhxWins.window(id).isSticked());
 
遮罩层
dhxWins.window(id).setModal(true);
alert(dhxWins.window(id).isModal());
alert(dhxWins.window(id).isModal());
 

顶层显示
dhxWins.window(id).bringToTop();
alert(dhxWins.window(id).isOnTop());
dhxWins.window(id).bringToBottom();
alert(dhxWins.window(id).isOnBottom());
 

全局事件
dhxWins.attachEvent("onResizeFinish", doOnResizeFinish); 
dhxWins.attachEvent("onMoveFinish", doOnMoveFinish); 
dhxWins.attachEvent("onFocus", doOnFocus);
 

个体事件
w2.attachEvent("onFocus", doOnFocusWin2);
 
URL事件 
dhxWins.attachEvent("onContentLoaded", function() { alert("onContentLoaded event fired."); });
w1.attachURL("../common/attach_url_ajax_inner.html", true);
 

按钮操作
btn: help,stick,sticked,park,minmax1,minmax2,close.
w1.button(btn[0]).show();
w1.button(btn[0]).hide();
alert(w1.button(btn[0]).isHidden());
w1.button(btn[0]).enable();
w1.button(btn[0]).disable();
alert(w1.button(btn[0]).isEnabled());
 
按钮事件
dhxWins.window("w1").attachEvent("onHelp", function() { alert("button \"Help\" was clicked"); }); w1.button("park").attachEvent("onClick", function() {alert("button \"Park\" was clicked"); });
 
自定义按钮
略
 

Attaching Menu/Toolbar/StatusBar
略
 
Integration with Other Components
略
















addUserButton 							adds a user button
allowMove 								allows a window to be moved
allowPark 								allows a window to be parked
allowResize 							allows a window to be resized
bringToBottom 							brings/sends a window to the bottom (z-positioning)
bringToTop 								brings/sends a window on the top (z-positioning)
button 									returns the button handler (dhtmlXWindowsBtn object) found by id
center 									centers a window in the viewport
centerOnScreen 							centers a window on the screen
clearIcon 								clears window's header icon
close 									closes a window
denyMove 								denies a window from moving
denyPark 								denies a window from parking
denyResize 								denies a window from resizing
getDimension							returns the current window's dimension
getIcon returns the current window's header icon
getId returns window's id
getMaxDimension returns the current max window's dimension
getMinDimension returns the current min window's dimension
getPosition returns the current window's position
getText returns window's header text
hide hides a window
hideHeader hides window's header
isHidden returns true if the window is hidden
isMaximized returns true if the window is maximized
isModal returns true if the window is modal
isMovable returns true if the window is movable
isOnBottom returns true if the window is on the bottom
isOnTop returns true if the window is on the top
isParkable returns true if the window is parkable
isParked returns true if the window is parked
isResizable returns true if the window is resizable
isSticked returns true if the window is sticked
keepInViewport keeps a window within the viewport
maximize maximizes a window
minimize minimizes a window
park parks a window (the next action is based on the window's current state)
progressOff hides a progress indicator
progressOn shows a progress indicator
removeUserButton removes a user button
restoreIcon restores default window's header icon (based on skin)
setDimension sets window's dimension
setIcon sets window's header icon
setMaxDimension sets max window's dimension
setMinDimension sets min window's dimension
setModal makes a window modal/modeless
setPosition sets window's position (moves a window to the point set by user)
setText sets window's header text
setToFullScreen sets a window to the fullscreen mode
show shows a window
showHeader shows window's header
stick sticks a window
unstick unsticks a window
dhtmlXWindowsBtn Object
disable disables a button
enable enables a button
hide hides a button
isEnabled checks if a button is enabled
isHidden checks if a button is hidden
show shows a button
dhtmlXWindows Object
attachEvent attaches an event handler
attachViewportTo attaches a viewport to an existing object on the page (renders an object as a viewport)
checkEvent returns true if the event exists
createWindow creates a new window and returns its handler
detachEvent removes an event handler
enableAutoViewport if true - allows an object to adjust the viewport automatically to document.body
findByText returns array of window handlers found by header text
forEachWindow iterator - goes through all windows and calls a user handler
getBottommostWindow returns the bottommost window
getEffect returns true if the effect is enabled
getTopmostWindow returns the topmost window
isWindow returns true if the window with specified id exists
setEffect sets a visual effect
setImagePath sets path to the directory where used images are located
setSkin changes window's skin
setViewport sets user-defined viewport if enableAutoViewport(false)
unload unloads an object and clears memory
window returns the window handler (dhtmlXWindowSngl object) found by id



