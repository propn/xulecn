<!----------------------------------------------------------------------
1）	Copyright by OSS R&D Dept. of ZTEsoft,2004-05-11
	File Name:TreeListView.htc
	Create Date:2004-05-11
	Author:Jin.XiangGuo
	Create Version Date:2004-05-11
	Description:提供前台公用的TreeListView功能的HTC控件
2)	Modified by Jin.XiangGuo 
	Modified Date:2004-06-08
	Added Property:
				getCheckedItem	:得到可选框选中的所有记录集合
				check			:设置是否需要显示可选框
	
3)	Modified by Jin.XiangGuo 
	Modified Date:2004-06-18
	Added Event:
				onItemChecked	:新增可选框选中事件
4)
	修改人： wenwen
	修改日期： 2004/7/23
	修改记录：链接样式表
	          添加表格"border5"、checkbox样式"checkbox"
	
5)	Modified by Jin.XiangGuo 
	Modified Date:2004-09-04
	Added Event:
				onItemContextMenu	:修改行右键事件
				onDivContextMenu	：新增Div右键事件（但是没有触发行右键事情）
	
6)	Modified by Jin.XiangGuo 
	Modified Date:2004-09-13
	Modified function:
				createHeader:列头也可以折行

7)	Modified by Jin.XiangGuo 
	Modified Date:2004-09-15
	Modified function:
				initCellText:可以实现超级链接的功能

8)	Modified by Jin.XiangGuo 
	Modified Date:2004-09-15
	Modified function:
				createHeader:可以实现隐藏标题头的功能

9)	Modified by Jin.XiangGuo 
	Modified Date:2004-10-09
	Modified Description:
				将隐藏的列不再以表的列的形式来体现		
----------------------------------------------------------------------->

<head>
<public:component tagname=treelistview literalcontent=true>
<PUBLIC:DEFAULTS viewLinkContent/>
<PUBLIC:ATTACH event="oncontentready" onevent="initLoad()" />
<PUBLIC:ATTACH event="onkeydown" onevent="eonkeydown()" />

<public:method name="init" />
<public:method name="getChildren" />
<public:method name="getParent" />
<public:method name="createTreeNode" />
<public:method name="add" />
<public:method name="clear" />
<public:method name="loadByXML" />
<public:method name="loadByData" />
<public:method name="refresh" />
<public:method name="setScrollToLine" />

<!--得到所显示的所有items的信息-->
<public:property name="items" get="getItems" />
<!--得到所有节点的总个数-->
<public:property name="allItemsLength" get="getItemsLength" />
<public:property name="selectedItem" get="getSelectedItem" />
<public:property name="oldItem" get="getOldItem" />
<public:property name="newItem" get="getNewItem" />

<!--设置控件高度-->
<public:property name="height" get="getHeight" put="setHeight" />
<public:property name="width" get="getWidth" put="setWidth" />

<!--设置图片路径-->
<public:property name="imagesurl" get="getImagesUrl" put="setImagesUrl" />
<public:property name="imgStyle"  put="setImgStyle"/>
<public:property name="showHead" get="getShowHead" put="setShowHead"/>

<public:event name="onselectedindexchange" id="_onIndexChange" />
<public:event name="onItemClick" id="_onclick" />
<public:event name="onItemContextMenu" id="_tvevtContextMenu" />
<public:event name="onDivContextMenu" id="_divContextMenu" />
<public:event name="onexpand" id="_tvevtExpand" />
<public:event name="oncollapse" id="_tvevtCollapse" />
<public:event name="onmouseover" id="_tvevthover" />
<public:event name="onmouseunhover" id="_tvevtUnhover" />
<!--可选框点击事件触发-->
<public:event name="onItemChecked" id="_onItemChecked" />
<public:event name="onscroll" id="_onscroll" />

</public:component>
<style>
	body,button,input,table {font-size:8pt;background-color:#E9DEB1}
	input {background-color:transparent;color:trans;}
	.headBtn {height:17;overflow:hidden;background-color:lavender;}
	.tDly {width:98%;font-size:8pt;height:16;border:0;cursor:default;}
	.border5{ BORDER-BOTTOM:#505050 1px solid; BORDER-LEFT:#FFFFFF  1px solid; BORDER-RIGHT:#505050  1px solid; BORDER-TOP:#FFFFFF  1px solid; background-color : #F8EEC6;}
	#bodyDiv {background-color:#FCF6DD;color:black}
</style>
</head>

<body style="border:1px solid #FFFFFF;">
<div id="div01" style="overflow-Y:hidden;overflow-X:hidden"  valign="top">
	<div id="div02" style="overflow-Y:hidden;overflow-X:hidden">
		<table id="_tbHead_" cellPadding="0" cellSpacing="0" border="0" style="table-layout:fixed;overflow:hidden;width:100%">
		</table>
	</div>
	<div id="bodyDiv" style="overflow-Y:auto;overflow-X:auto;height:120;"  valign="top" onscroll = "_scroll();" onmousemove="bodyTblMove();" oncontextmenu="divContextMenu();">
		<table id="_tbValues_"  cellPadding="0" cellSpacing="0" border="0" style="table-layout:fixed;overflow:hidden;width:100%">
		</table>
	</div>
</div>
<div id=splitLine style="position:absolute;top:0;left:-10;width:1px;height:100%;background-color:black;display:none;"></div>
</body>
<script language=javascript>
//columnDesc -- propertyName(binding to property),displayText,width
var g_arrColumnDesc = new Array();

//nodeData--propertyValue & text,children
var g_treeData = new Array(); 


//记录整个树表关系
var _itemsNode=new Object();
_itemsNode.mapRef="";

//记录当前行
var _currentRow=null;
//记录当前被点击check的行
var _currentCheckRow=null;

//记录旧行记录
var _oldRow=null;
var _xmlDoc=null;
var _splitlocked=false;

//记录图片的样式
var _imgStyle="";

//记录可选框是否需要被选中，默认为不需要
var _allChecked=false;

//判断时候右键点击在表格内
var chkClk=false;

var _showHead=true;//记录是否显示表头

var clkNum=0;//超级链接的id数组成
var g_arrDates = new Array();
function CheckDate(tag)
{
	var cp = new Object();
	cp.date = new Date();
	cp.tag = tag;
	g_arrDates[g_arrDates.length] = cp;
}

function ShowAllTimeCost()
{
	var strMsg = "";
	for(var i=0;i<g_arrDates.length-1;i++)
	{
		var cp1 = g_arrDates[i];
		var cp2 = g_arrDates[i+1];
		var dtSpan = cp2.date - cp1.date;
		strMsg += "'"+cp1.tag+"' to '"+cp2.tag+"' cost:"+dtSpan+"ms\r\n";
	}
	alert(strMsg);
}

/*************************************************************************
函数说明：根据传入的XML信息,初始化树表
函数要求：
输入参数：
	xml:xml信息流		
输出参数：
	无
************************************************************************/
function loadByXML(xml)
{
	_xmlDoc=new ActiveXObject("msxml2.Domdocument");
	if (_xmlDoc.loadXML(xml))
	{
		var root=_xmlDoc.documentElement;
		
		//开始提取columns信息
		var colNodes=root.selectSingleNode("columns");
		if (colNodes!=null)
		{
			loadXMLColums(colNodes.xml);
		}
		
		//开始提取nodes信息
		var colNodes=root.selectSingleNode("items");
		if (colNodes!=null)
		{
			g_treeData.length=0;
			loadXMLNodes(g_treeData,colNodes.xml);
		}
		g_arrDates = new Array();
		init(g_arrColumnDesc,g_treeData);
	}
}

/*************************************************************************
函数说明：初始化时提取定义的XML信息,并初始化树表
函数要求：
输入参数：
	无
输出参数：
	无
************************************************************************/
function initLoad()
{
	_xmlDoc=new ActiveXObject("msxml2.Domdocument");

	var s=element.innerHTML;
	s =s.replace("<?xml:namespace prefix = ADVTREE />","").replace(/ADVTREE:/g,"");
	loadByXML(s);
}

/*************************************************************************
函数说明：根据传入的XML信息,初始化Columns
函数要求：
输入参数：
	xml:xml数据流		
输出参数：
	g_arrColumnDesc:公用存储columns的变量
************************************************************************/
function loadXMLColums(xml)
{
	var xmldoc=new ActiveXObject("Microsoft.XMLDOM");
	xmldoc.async = false;
	if(xmldoc.loadXML(xml))
	{
		var root=xmldoc.documentElement;
		g_arrColumnDesc.length=0;
		var colNodes=root.childNodes;
		for(var i=0;i<colNodes.length;i++)
		{
			var node=colNodes.item(i);
			g_arrColumnDesc[i]=new Object();
			g_arrColumnDesc[i].width=node.getAttribute("width");
			g_arrColumnDesc[i].displayText=node.getAttribute("displayText");
			g_arrColumnDesc[i].propertyName=node.getAttribute("propertyName");
			if (node.getAttribute("displayType")!=null)
			{
				g_arrColumnDesc[i].displayType=node.getAttribute("displayType");
				g_arrColumnDesc[i].displayTypeName=node.getAttribute("displayTypeName");
			}
			g_arrColumnDesc[i].display=(node.getAttribute("display")=="true")?true:false;
		}
	}
}

/*************************************************************************
函数说明：根据传入的XML信息和treeData对象数组,初始化treeData对象数组
函数要求：
输入参数：
	xml:xml数据流		
输出参数：
	treeData:存储树表信息的对象数组变量
************************************************************************/
function loadXMLNodes(treeData,xml)
{
	var xmldoc=new ActiveXObject("Microsoft.XMLDOM");
	xmldoc.async = false;
	if(xmldoc.loadXML(xml))
	{
		var root=xmldoc.documentElement;
		treeData.length=0;
		loadNodes(treeData,root);
	}
}

/*************************************************************************
函数说明：根据传入的XML信息块提取的对象和treeData对象数组,初始化treeData对象数组
函数要求：
输入参数：
	root:xml数据流生成的信息对象		
输出参数：
	treeData:存储树表信息的对象数组变量
************************************************************************/
function loadNodes(treeData,root)
{
	var colNodes=root.childNodes;
	for(var i=0;i<colNodes.length;i++)
	{
		var node=colNodes.item(i);
		treeData[i]=new Object();
		for(var j=0;j<g_arrColumnDesc.length;j++)
		{
			treeData[i][g_arrColumnDesc[j].propertyName]=node.getAttribute(g_arrColumnDesc[j].propertyName);
			if (g_arrColumnDesc[j].displayType=="link" &&  g_arrColumnDesc[j].displayTypeName!=null 
				&& node.getAttribute(g_arrColumnDesc[j].displayTypeName)!=null)
			{
				treeData[i][g_arrColumnDesc[j].displayTypeName]=node.getAttribute(g_arrColumnDesc[j].displayTypeName);
			}
		}
		
		//将背景色、字体颜色加进来
		if (node.getAttribute("FONT_COLOR")!=null)
		{
			treeData[i].FONT_COLOR=node.getAttribute("FONT_COLOR");
		}
		if (node.getAttribute("BG_COLOR")!=null)
		{
			treeData[i].BG_COLOR=node.getAttribute("BG_COLOR");
		}
		
		if (node.childNodes.length>0)
		{
			treeData[i].children=new Array();
			loadNodes(treeData[i].children,node);
		}
	}
}
/*************************************************************************
函数说明：定义公用信息模块
函数要求：
输入参数：
	无	
输出参数：
	无
************************************************************************/
TreeListViewHandler = 
{
	nextID					: 0,
	getUniqueID				: function() { return this.nextID++; },
	nLabelColumn			: 0,
	imageUrl				:"images",
	imageLeave				:"select.leave.gif",
	imageEnter				:"select.enter.gif",
	bgColor					:"#F1E8C4",
	frontColor				:"#E9DEB1",
	fontColor				:"#000000"
}

/*************************************************************************
函数说明：根据传入的节点，生成树表的节点行信息
函数要求：
输入参数：
	node：行节点	
输出参数：
	无
************************************************************************/
function showNodeData(node)
{
	var row=node.row;
	var imageName=node.imageLeave;
	
	if (node.selected)
	{
		var imageName=node.imageEnter;
		row.style.backgroundColor =TreeListViewHandler.bgColor;
	}
	else
	{
		row.style.backgroundColor =node.bgColor;
	}
	for(var i=0;i<g_arrColumnDesc.length;i++)
	{
		var columnDesc = g_arrColumnDesc[i];
		if(!columnDesc.display)
		{
			continue;
		}
		var cell=row.cells[i];
		
		//看是否需要超级连接 added by jinxg 2004/9/15
		var cellHtml=node[columnDesc.propertyName];
		if (columnDesc.displayType=="link" &&  columnDesc.displayTypeName!=null 
			&& node[columnDesc.displayTypeName]!=null)
		{
			var spanId="span"+(clkNum++);
			cellHtml="<span id='"+spanId+"' onmouseover=\"clkMouseOver('"+spanId+"')\" onmouseleave=\"clkMouseLeave('"+spanId+"')\" onclick=\"hrefClick("+node[columnDesc.displayTypeName]+")\"><u>"+cellHtml+"</u></a>";
		}
		
		if (TreeListViewHandler.nLabelColumn==i)
		{
			if(node.items.length>0)
			{					
				//判断显示什么图像 如果位于列头，则显示fplus.gif图片，
				//若位于列尾，则显示handle.expand.end.gif图片，
				//若位于列中，则显示handle.expand.more.gif图片
				var colId="Col"+node.row.id;
				var str="id='"+colId+"'onclick=\"onTreeTableCollaps('"+node.row.id+"'";
				var collapsImg="";
				if (node.firstOnlyItem)
				{
					str+=",'Rplus');\"";
					
					//根据是否收缩的属性判定该显示的图片
					if (node.collaps)
					{
						collapsImg="Rplus.gif";
					}
					else
					{
						collapsImg="Rminus.gif";
					}
					node.frontMap ="<img style='"+_imgStyle+"' src='"+TreeListViewHandler.imageUrl+
										"/"+collapsImg+"' align='absmiddle'"+str+" >";
					node.mapRef=node.parentNode.mapRef+
										"<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
											"/white.gif' align='absmiddle'>";
				}
				else
				{
					if (node.firstNode)
					{
						if (node.parentNode==_itemsNode)
						{
							str+=",'fplus');\"";
							
							//根据是否收缩的属性判定该显示的图片
							if (node.collaps)
							{
								collapsImg="fplus.gif";
							}
							else
							{
								collapsImg="fminus.gif";
							}
						}
						else
						{
							str+=",'Tplus');\"";
							
							//根据是否收缩的属性判定该显示的图片
							if (node.collaps)
							{
								collapsImg="Tplus.gif";
							}
							else
							{
								collapsImg="Tminus.gif";
							}
						}
						node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
											"/"+collapsImg+"' align='absmiddle'  "+str+" >";
						node.mapRef=node.parentNode.mapRef+
											"<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
												"/i.gif' align='absmiddle'>";
					}
					else if (node.lastNode)
					{
						str+=",'Lplus');\"";
						
						//根据是否收缩的属性判定该显示的图片
						if (node.collaps)
						{
							collapsImg="Lplus.gif";
						}
						else
						{
							collapsImg="Lminus.gif";
						}
						
						node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
										"/"+collapsImg+"' align='absmiddle' "+str+" >";
						node.mapRef=node.parentNode.mapRef+"<img style='"+_imgStyle+"'  src='"+
										TreeListViewHandler.imageUrl+"/white.gif' align='absmiddle'>";
					}
					else
					{
						str+=",'Tplus');\"";
						
						//根据是否收缩的属性判定该显示的图片
						if (node.collaps)
						{
							collapsImg="Tplus.gif";
						}
						else
						{
							collapsImg="Tminus.gif";
						}
						
						node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
										"/"+collapsImg+"' align='absmiddle' "+str+">";
						node.mapRef=node.parentNode.mapRef+"<img style='"+_imgStyle+"'  src='"+
										TreeListViewHandler.imageUrl+"/i.gif' align='absmiddle'>";
					}
				}
				cell.innerHTML=node.parentNode.mapRef+node.frontMap+"<span>"+cellHtml+"</span>";
				
			}
			else
			{
				//判断显示什么图像 如果位于列头，则显示connect.more.gif图片，
				//若位于列尾，则显示connect.end.gif图片，
				//若位于列中，则显示connect.more.gif图片
				if (node.firstOnlyItem)
				{
					node.frontMap="";
				}
				else
				{
					if (node.firstNode)
					{
						if (node.parentNode==_itemsNode)
						{
							node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/f.gif' align='absmiddle'>";
						}
						else
						{
							node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/T.gif' align='absmiddle'>";
						}
					}
					else if (node.lastNode)
					{
						node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/L.gif' align='absmiddle'>";
					}
					else
					{
						node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/T.gif' align='absmiddle'>";
					}
				}
				cell.innerHTML="<span>"+node.parentNode.mapRef+node.frontMap+cellHtml+"</span>";
			}
		}
		else
		{
			cell.innerHTML="<span>"+cellHtml+"</span>";
		}
	}
}

/*************************************************************************
函数说明：根据传入的树表对象数据和父行节点，生成树表的节点行信息
函数要求：
输入参数：
	parentRowNode  	：父行节点，可以为空，若为空说明这个需要生成的行节点是根行节点		
输出参数：
		node:生成的节点
************************************************************************/
function createRowNodeText(parentRowNode)
{
	for(var j=0;j<parentRowNode.items.length;j++)
	{		
		//开始设定需要是位于列头、列尾，还是中间
		if (j==0)
		{
			parentRowNode.items[j].firstNode=true;
			parentRowNode.items[j].lastNode=false;
			parentRowNode.items[j].middleNode=false;
		}
		if (j==parentRowNode.items.length-1)
		{
			parentRowNode.items[j].firstNode=false;
			parentRowNode.items[j].lastNode=true;
			parentRowNode.items[j].middleNode=false;
		}
		if ((j>0) &&(j<parentRowNode.items.length-1))
		{
			parentRowNode.items[j].firstNode=false;
			parentRowNode.items[j].lastNode=false;
			parentRowNode.items[j].middleNode=true;
		}
		
		//判断是否是根节点，并且根节点下只有一个节点
		if ((parentRowNode.items.length==1) &&(parentRowNode==_itemsNode))
		{
			parentRowNode.items[j].firstOnlyItem=true;
		}
		else
		{
			parentRowNode.items[j].firstOnlyItem=false;
		}
		
		//显示行节点信息
		showNodeData(parentRowNode.items[j]);
		
		if(parentRowNode.items[j].items.length>0)
		{
			createRowNodeText(parentRowNode.items[j]);	
		}
	}
	return true;
}

/*************************************************************************
函数说明：根据传入的树表对象数据和父行节点，生成树表的节点行信息
函数要求：
输入参数：
	RowNode  	：行节点信息		
输出参数：
		node:生成的节点
************************************************************************/
function initCellText(node,columnDesc,i,nodeData)
{
	
	var imageName=node.imageLeave;
	var str="";
	var cellHtml=nodeData[columnDesc.propertyName];
	
	//对列的特殊情况进行分析
	if (columnDesc.displayType=="link" &&  columnDesc.displayTypeName!=null 
		&& nodeData[columnDesc.displayTypeName]!=null)
	{
		var funcStr="hrefClick("+nodeData[columnDesc.displayTypeName]+")";
		var spanId="span"+(clkNum++);
		cellHtml="<span id='"+spanId+"' onmouseover=\"clkMouseOver('"+spanId+"')\" onmouseleave=\"clkMouseLeave('"+spanId+"')\" onclick=\""+funcStr+"\"><u>"+cellHtml+"</u></span>";
	}
	
	if (TreeListViewHandler.nLabelColumn==i)
	{
		if(nodeData.children!=null)
		{					
			//判断显示什么图像 如果位于列头，则显示fplus.gif图片，
			//若位于列尾，则显示handle.expand.end.gif图片，
			//若位于列中，则显示handle.expand.more.gif图片
			var colId="Col"+node.rowId;
			var str="id='"+colId+"' onclick=\"onTreeTableCollaps('"+node.rowId+"'";
			var collapsImg="";
			if (node.firstOnlyItem)
			{
				str+=",'Rplus');\"";
				
				//根据是否收缩的属性判定该显示的图片
				if (node.collaps)
				{
					collapsImg="Rplus.gif";
				}
				else
				{
					collapsImg="Rminus.gif";
				}
				node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
									"/"+collapsImg+"' align='absmiddle'"+str+" >";
				node.mapRef=node.parentNode.mapRef+
									"<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
										"/white.gif' align='absmiddle'>";
			}
			else
			{
				if (node.firstNode)
				{
					if (node.parentNode==_itemsNode)
					{
						str+=",'fplus');\"";
						
						//根据是否收缩的属性判定该显示的图片
						if (node.collaps)
						{
							collapsImg="fplus.gif";
						}
						else
						{
							collapsImg="fminus.gif";
						}
					}
					else
					{
						str+=",'Tplus');\"";
						
						//根据是否收缩的属性判定该显示的图片
						if (node.collaps)
						{
							collapsImg="Tplus.gif";
						}
						else
						{
							collapsImg="Tminus.gif";
						}
					}
					node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
										"/"+collapsImg+"' align='absmiddle'  "+str+" >";
					node.mapRef=node.parentNode.mapRef+
										"<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
											"/i.gif' align='absmiddle'>";
				}
				else if (node.lastNode)
				{
					str+=",'Lplus');\"";
					
					//根据是否收缩的属性判定该显示的图片
					if (node.collaps)
					{
						collapsImg="Lplus.gif";
					}
					else
					{
						collapsImg="Lminus.gif";
					}
					
					node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
									"/"+collapsImg+"' align='absmiddle' "+str+" >";
					node.mapRef=node.parentNode.mapRef+"<img style='"+_imgStyle+"'  src='"+
									TreeListViewHandler.imageUrl+"/white.gif' align='absmiddle'>";
				}
				else
				{
					str+=",'Tplus');\"";
					
					//根据是否收缩的属性判定该显示的图片
					if (node.collaps)
					{
						collapsImg="Tplus.gif";
					}
					else
					{
						collapsImg="Tminus.gif";
					}
					
					node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+
									"/"+collapsImg+"' align='absmiddle' "+str+">";
					node.mapRef=node.parentNode.mapRef+"<img style='"+_imgStyle+"'  src='"+
									TreeListViewHandler.imageUrl+"/i.gif' align='absmiddle'>";
				}
			}
			str=node.parentNode.mapRef+node.frontMap+"<span>"+cellHtml+"</span>";
		}
		else
		{
			//判断显示什么图像 如果位于列头，则显示connect.more.gif图片，
			//若位于列尾，则显示connect.end.gif图片，
			//若位于列中，则显示connect.more.gif图片
			if (node.firstOnlyItem)
			{
				node.frontMap="";
			}
			else
			{
				if (node.firstNode)
				{
					if (node.parentNode==_itemsNode)
					{
						node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/f.gif' align='absmiddle'>";
					}
					else
					{
						node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/T.gif' align='absmiddle'>";
					}
				}
				else if (node.lastNode)
				{
					node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/L.gif' align='absmiddle'>";
				}
				else
				{
					node.frontMap ="<img style='"+_imgStyle+"'  src='"+TreeListViewHandler.imageUrl+"/T.gif' align='absmiddle'>";
				}
			}
			str="<span>"+node.parentNode.mapRef+node.frontMap+cellHtml+"</span>";
		}
	}
	else
	{
		str="<span>"+cellHtml+"</span>";
	}
	return str;
}

/*************************************************************************
函数说明：根据传入的数组对象数据和父行节点，生成树表的节点行
函数要求：
输入参数：
	nData			：需要生成树表节点的数组
	parentRowNode  	：父行节点，可以为空，若为空说明这个需要生成的行节点是根行节点
			对象属性包括：
				text		：树节点的text属性值
				children	: 子节点		  
			如：
				nData[0].text="市话业务";	
				nData[0].children;	
输出参数：
		node:生成的节点
************************************************************************/
function createRowNode(nData,parentRowNode)
{
	parentRowNode.items = new Array();
	for(var j=0;j<nData.length;j++)
	{
		var nodeData=nData[j];
		//根据表的列名将对象的各个属性值填入到table的各个cell中
		var row  =  _tbValues_.insertRow();
		row.id = "row"+TreeListViewHandler.getUniqueID();
		row.onmouseover=rowMouseHover;
		row.onmouseleave=rowMouseUnhover;
		row.onclick=rowClick;
		row.oncontextmenu=rowOnContextMenu;
		parentRowNode.items[j]=new Object();
		parentRowNode.items[j].row=row;
		parentRowNode.items[j].imageEnter=TreeListViewHandler.imageEnter;
		parentRowNode.items[j].imageLeave=TreeListViewHandler.imageLeave;
		parentRowNode.items[j].parentNode=parentRowNode;
		parentRowNode.items[j].selected=false;
		var cell=null;
		
		for(var i=0;i<g_arrColumnDesc.length;i++)
		{
			var columnDesc = g_arrColumnDesc[i];
			if(!columnDesc.display)
			{
				continue;
			}
			cell = row.insertCell();
			if(columnDesc.width!=null)
				cell.width = columnDesc.width;
			cell.height="15";
			cell.noWrap=true;
		}
		
		//根据nodeData的属性值给parentRowNode付值
		for (var key in nodeData)
		{
			if (key!="children")
			{
				parentRowNode.items[j][key]=nodeData[key];
			}
		}
		
		for(var i=0;i<g_arrColumnDesc.length;i++)
		{
			var columnDesc = g_arrColumnDesc[i];
			if(!columnDesc.display)
			{
				continue;
			}
			cell = row.cells[i];
		}
		
		
		//格式化节点
		parentRowNode.items[j]=private_getTreeNode(parentRowNode.items[j]);
		
		//判断时候有子节点，若有的话就要将子节点的属性值付给tree，生成相应的Node
		parentRowNode.items[j].items = new Array();
		if(nodeData.children!=null)
		{
			//默认模式为未展开
			parentRowNode.items[j].collaps=true;
			createRowNode(nodeData.children,parentRowNode.items[j]);	
		}
	}
	return true;
}	
/*************************************************************************
函数说明：根据传入的数组对象数据和父行节点，生成树表的节点行
函数要求：
输入参数：
	nData			：需要生成树表节点的数组
	parentRowNode  	：父行节点，可以为空，若为空说明这个需要生成的行节点是根行节点
			对象属性包括：
				text		：树节点的text属性值
				children	: 子节点		  
			如：
				nData[0].text="市话业务";	
				nData[0].children;		
输出参数：
		node:生成的节点
************************************************************************/
function initRowNode(nData,parentRowNode)
{
	parentRowNode.items = new Array();
	var arrStr = new Array();
	var ai = 0;
	for(var j=0;j<nData.length;j++)
	{
		var nodeData=nData[j];
		//根据表的列名将对象的各个属性值填入到table的各个cell中
		var rowId ="row"+TreeListViewHandler.getUniqueID();
		arrStr[ai++] = "<tr id='"+rowId+"' onmouseover='rowMouseHover();' onmouseleave='rowMouseUnhover();' onclick='rowClick();' oncontextmenu='rowOnContextMenu();'";
		parentRowNode.items[j]=new Object();
		//parentRowNode.items[j].row=row;
		parentRowNode.items[j].imageEnter=TreeListViewHandler.imageEnter;
		parentRowNode.items[j].imageLeave=TreeListViewHandler.imageLeave;
		parentRowNode.items[j].parentNode=parentRowNode;
		parentRowNode.items[j].rowId=rowId;
		parentRowNode.items[j].selected=false;
		
		if (nodeData.FONT_COLOR!=null)
		{
			parentRowNode.items[j].fontColor=nodeData.FONT_COLOR;
		}
		else
		{
			parentRowNode.items[j].fontColor=TreeListViewHandler.fontColor;
		}
		if (nodeData.BG_COLOR!=null)
		{
			parentRowNode.items[j].bgColor=nodeData.BG_COLOR;
		}
		else
		{
			parentRowNode.items[j].bgColor=TreeListViewHandler.frontColor;
		}
		arrStr[ai++] =" style='color:"+parentRowNode.items[j].fontColor+";background-Color:"+parentRowNode.items[j].bgColor+"'>";
		
		if(nodeData.children!=null)
		{
			//默认模式为未展开
			parentRowNode.items[j].collaps=true;
		}
		//开始设定需要是位于列头、列尾，还是中间
		if (j==0)
		{
			parentRowNode.items[j].firstNode=true;
			parentRowNode.items[j].lastNode=false;
			parentRowNode.items[j].middleNode=false;
		}
		if (j==nData.length-1)
		{
			parentRowNode.items[j].firstNode=false;
			parentRowNode.items[j].lastNode=true;
			parentRowNode.items[j].middleNode=false;
		}
		if ((j>0) &&(j<nData.length-1))
		{
			parentRowNode.items[j].firstNode=false;
			parentRowNode.items[j].lastNode=false;
			parentRowNode.items[j].middleNode=true;
		}
		
		//判断是否是根节点，并且根节点下只有一个节点
		if ((nData.length==1) &&(parentRowNode==_itemsNode))
		{
			parentRowNode.items[j].firstOnlyItem=true;
		}
		else
		{
			parentRowNode.items[j].firstOnlyItem=false;
		}
		
		for(var i=0;i<g_arrColumnDesc.length;i++)
		{
			var columnDesc = g_arrColumnDesc[i];
			if(!columnDesc.display)
			{
				continue;
			}
			arrStr[ai++] ="<td ";
			if(columnDesc.width!=null)
				arrStr[ai++] ="width = "+columnDesc.width;
			arrStr[ai++] =" height='15' noWrap="+true;
			
			arrStr[ai++] =">";
			
			//开始给td内容付值
			arrStr[ai++] =initCellText(parentRowNode.items[j],columnDesc,i,nodeData);
			arrStr[ai++] ="</td>";
		}
		
		//根据nodeData的属性值给parentRowNode付值
		for (var key in nodeData)
		{
			if (key!="children" && key!="FONT_COLOR" && key!="BG_COLOR")
			{
				parentRowNode.items[j][key]=nodeData[key];
			}
		}
		arrStr[ai++] ="</tr>";
		
		//判断时候有子节点，若有的话就要将子节点的属性值付给tree，生成相应的Node
		parentRowNode.items[j].items = new Array();
		if(nodeData.children!=null)
		{
			arrStr[ai++] =initRowNode(nodeData.children,parentRowNode.items[j]);	
		}
	}
	
	return arrStr.join("");
}

/*************************************************************************
函数说明：清空Tree和Table以及表头
函数要求：只有将控件已有的值清空了才能够保证展现的值就是我们填入的值
输入参数：
	无；	
输出参数：
	无；
************************************************************************/
function clearAll()
{
	div02.innerHTML='<table id="_tbHead_" cellPadding="0" cellSpacing="0" border="0" style="table-layout:fixed;overflow:hidden;width:100%"></table>';
	bodyDiv.innerHTML='<table id="_tbValues_"  cellPadding="0" cellSpacing="0" border="0" style="table-layout:fixed;overflow:hidden;width:100%"></table>';
	
	_currentRow=null;
	_oldRow=null;
	_xmlDoc=null;
}

/*************************************************************************
函数说明：清空Tree和Table
函数要求：只清空记录，不清空表头
输入参数：
	无；	
输出参数：
	无；
************************************************************************/
function clear()
{
	bodyDiv.innerHTML='<table id="_tbValues_"  cellPadding="0" cellSpacing="0" border="0" style="table-layout:fixed;overflow:hidden;width:100%"></table>';
	_currentRow=_oldRow=null;
	_itemsNode.items=new Array();
}

/*************************************************************************
函数说明：根据传入的用来标识Coloum信息的对象数组，生成相应的Table的Coloum
函数要求：传入的对象必须包括displayText、displayName信息
输入参数：
	g_arrColumnDesc[0].width:	用来之定td的宽度
	g_arrColumnDesc[0].display:	是否需要显示该列
	g_arrColumnDesc[0].displayText:	用来表示table的head需要显示的信息
	g_arrColumnDesc[0].displayName:	关于各个column的唯一标识，在将数据填入表的时候用到	
输出参数：
	无；
************************************************************************/
function createHeader()
{
	var row = _tbHead_.insertRow();
	row.onmousemove=_onHeadMousemove;
	row.onmouseleave=_onHeadMouseleave;
	row.onmousedown=_onHeadMousedown;
	row.onmouseup=_onHeadMouseup;
	var celIndex=0;
	
	for(var i=0;i<g_arrColumnDesc.length;i++)
	{
		var columnDesc = g_arrColumnDesc[i];
		if(!columnDesc.display)
		{
			continue;
		}
		cell = row.insertCell();	
		cell.bgColor="lavender";
		if(columnDesc.width!=null)
			cell.width = columnDesc.width;
		cell.align = "center";
		
		t_Button=document.createElement("<button style='width:100%;' fld='"+columnDesc.displayText+"' desc='0' class='border5'></button>");
		t_Button.innerHTML="<DIV style='width:100%;height:100%;' noWrap=true>"+columnDesc.displayText+"</DIV>";
		cell.appendChild(t_Button);
		cell.celIndex=celIndex;
		celIndex++;
	}
	
	//判断是否需要隐藏表头
	if (_showHead)
	{
		_tbHead_.style.display="";
	}
	else
	{
		_tbHead_.style.display="none";
	}
}

/*************************************************************************
函数说明：将全局变量_itemsNode与表行进行一一的对应关系
函数要求：传入的两个参数都必须是对象数组
输入参数：
	无	
输出参数：
	无；
************************************************************************/
function initNodeRowByRowId(item)
{
	var bdcrows = bodyDiv.children[0].rows;
	for(var i=0;i<item.items.length;i++)
	{
		var child = item.items[i];
		child.row=bdcrows[k++];//计数器
		private_getTreeNode(child);
		if (child.items.length>0) initNodeRowByRowId(child);	
	}
}

/*************************************************************************
函数说明：根据传入的用来标识Coloum信息的对象数组，以及记录实际信息的TreeData
	  对象数组，对控件进行初始化
函数要求：传入的两个参数都必须是对象数组
输入参数：
	arrColumnDesc[0].width:	用来之定td的宽度
	arrColumnDesc[0].displayText:	用来表示table的head需要显示的信息
	arrColumnDesc[0].displayName:	关于各个Head的唯一标识，在将数据填入表的时候用到
	
	treeData[0].text：显示的文本信息
	treeData[0].index：序号
	treeData[0].children:子节点
		另外还可以增加属性，做为要显示的信息		
输出参数：
	无；
************************************************************************/
var k=0;//计数器
function init(arrColumnDesc,treeData)
{
	g_arrColumnDesc= arrColumnDesc;
	g_treeData = treeData;
	clearAll();
	createHeader();
	var str="<table id='_tbValues_' cellPadding='0' cellSpacing='0' border='0' width='100%' style='table-layout:fixed;overflow:hidden;'>";
	str+=initRowNode(treeData,_itemsNode);
	str+="</table>";
	bodyDiv.innerHTML=str;
	k=0;//计数器初始化
	initNodeRowByRowId(_itemsNode);
	//createRowNode(treeData,_itemsNode);
	//设置第一行默认被选中
	if (_itemsNode.items.length>0)
	{
		_oldRow=_currentRow=_itemsNode.items[0];
		_itemsNode.items[0].selected=true;
		
		_currentRow.selected=true;
		_currentRow.row.style.backgroundColor =TreeListViewHandler.bgColor;
		//_currentRow.row.style.color =TreeListViewHandler.fontColor;
	}
	chgRowDisplay(_itemsNode,false);
}

/*************************************************************************
函数说明：根据传入的记录实际信息的TreeData对象数组，对控件进行初始化
函数要求：传入的参数必须是对象数组
输入参数：
	treeData[0].text：显示的文本信息
	treeData[0].index：序号
	treeData[0].children:子节点
		另外还可以增加属性，做为要显示的信息	
输出参数：
	无；
************************************************************************/
function loadByData(treeData)
{
	g_treeData = treeData;
	
	clearAll();
	createHeader();
	
	var str="<table id='_tbValues_' cellPadding='0' cellSpacing='0' border='0' width='100%' style='table-layout:fixed;overflow:hidden;'>";
	str+=initRowNode(treeData,_itemsNode);
	str+="</table>";
	bodyDiv.innerHTML=str;
	k=0;//计数器清0
	initNodeRowByRowId(_itemsNode);
	//createRowNode(treeData,_itemsNode);
	//设置第一行默认被选中
	if (_itemsNode.items.length>0)
	{
		_oldRow=_currentRow=_itemsNode.items[0];
		_itemsNode.items[0].selected=true;
		
		_currentRow.selected=true;
		_currentRow.row.style.backgroundColor =TreeListViewHandler.bgColor;
		//_currentRow.row.style.color =TreeListViewHandler.fontColor;
	}
	chgRowDisplay(_itemsNode,false);
}

/*************************************************************************
函数说明：提取所有项
函数要求：
输入参数：
	无		
输出参数：
	无；
************************************************************************/
function getItems()
{
	return _itemsNode.items;
}

/*************************************************************************
函数说明：提取事件触发的行
函数要求：
输入参数：
	elm:触发事件的元素	
输出参数：
	无；
************************************************************************/
function getRow(elm)
{
	if(elm==null) return null;
	if (elm.tagName=="TR")
		return elm;
	else
		return getRow(elm.parentElement);
}

/*************************************************************************
函数说明：当鼠标移动到指定行的时候触发的事件
函数要求：
输入参数：
	无		
输出参数：
	无；
************************************************************************/
function rowMouseHover()
{
	_splitlocked  = false;
	_setCursor('default');
	_curResizeTD = null;
	var evt=createEventObject();
	_tvevthover.fire(evt);
}

/*************************************************************************
函数说明：当鼠标移出指定行的时候触发的事件
函数要求：
输入参数：
	无	
输出参数：
	无；
************************************************************************/
function rowMouseUnhover()
{
	var evt=createEventObject();
	_tvevtUnhover.fire(evt);
}

/*************************************************************************
函数说明：当鼠标右键点击指定行的时候触发的事件
函数要求：
输入参数：
	无	
输出参数：
	无；
************************************************************************/
function rowOnContextMenu()
{
	var row= getRow(event.srcElement);
	
	//得到当前所在行所在的index位置
	var _currentConRow=getItemIndexByRowId(_itemsNode,row.id);
	
	//修改当前行和旧行显示的图象
	
	if ((_currentRow!=null) && (_currentConRow!=_currentRow))
	{
		if(_showImage)
		{
			imageUrl=TreeListViewHandler.imageUrl+"/"+_currentRow.imageLeave;
			imageId="img"+_currentRow.row.id;
			document.all(imageId).src=imageUrl;
		}
	}
	
	//判断是否需要触发onselectedindexchange事件
	if ((_currentConRow!=_currentRow) && (_currentRow!=null))
	{
		_oldRow=_currentRow;//备份当前记录到_oldRow
		_currentRow=_currentConRow;
		_oldRow.selected=false;
		_currentRow.selected=true;
		var evt=createEventObject();
		_onIndexChange.fire(evt);
	}
	
	//改变选中行的背景颜色
	_oldRow.row.style.backgroundColor =_oldRow.bgColor;
	_currentRow.row.style.backgroundColor =TreeListViewHandler.bgColor;
	
	var evt=createEventObject();
	_tvevtContextMenu.fire(evt);
	chkClk=true;
	
}

/*************************************************************************
函数说明：根据指定的行得到行所在的位置
函数要求：传入参数为行，并且在树表中
输入参数：
	item	:树表
	rowId	:行Id	
输出参数：
	行所在的树表中的位置
************************************************************************/
function getItemIndexByRowId(item,rowId)
{
	for (var i=0;i<item.items.length;i++)
	{
		
		if (item.items[i].row.id==rowId)
		{
			return item.items[i];
		}
		if (item.items[i].items!=null)
		{
			var ret=getItemIndexByRowId(item.items[i],rowId);
			if(ret!=null)
			{
				return ret;
			}
		}
	}
	return null;
}

/*************************************************************************
函数说明：触发行的点击事件函数
函数要求：
输入参数：
	无		
输出参数：
	行所在的树表中的位置
************************************************************************/
function rowClick()
{
	_oldRow=_currentRow;//备份当前记录到_oldRow
	var row = getRow(event.srcElement);
	
	//得到当前所在行所在的index位置
	_currentRow=getItemIndexByRowId(_itemsNode,row.id);
	
	//判断是否需要触发onselectedindexchange事件
	if ((_oldRow!=null) && (_oldRow!=_currentRow))
	{
		_oldRow.selected=false;
		_currentRow.selected=true;
		_oldRow.row.style.backgroundColor =_oldRow.bgColor;
		row.style.backgroundColor =TreeListViewHandler.bgColor;
		
		var evt=createEventObject();
		_onIndexChange.fire(evt);
	}
	//_oldRow=_currentRow;//备份当前记录到_oldRow
	
	//触发点击事件
	var evt=createEventObject();
	_onclick.fire(evt);
}

/*************************************************************************
函数说明：改变所在行的所有子节点的隐藏与否属性
函数要求：
输入参数：
	rowId：	行Id
	image：	图象代码	
输出参数：
	无
************************************************************************/
function chgRowDisplay(rowIndex,bool)
{
	var str;
	if (bool)
	{
		str="none";
	}
	else
	{
		str="";
	}
	for(var i=0;i<rowIndex.items.length;i++)
	{
		rowIndex.items[i].row.style.display=str;
		if (rowIndex.items[i].items.length>0)
		{
			//若父节点是要展开，则子节点的子节点是否需要展开要根据子节点是否需要展开来决定，
			//若父节点是要缩回，则所有归属下的子孙节点都要隐藏
			if (bool)
			{
				chgRowDisplay(rowIndex.items[i],bool);
			}
			else
			{
				chgRowDisplay(rowIndex.items[i],rowIndex.items[i].collaps);
			}
		}
	}
}

/*************************************************************************
函数说明：触发树节点的展开和收缩事件函数
函数要求：
输入参数：
	rowId：	行Id
	image：	图象代码	
输出参数：
	无
************************************************************************/
function onTreeTableCollaps(rowId,image)
{
	//得到当前所在行所在的index位置
	_currentCheckRow=getItemIndexByRowId(_itemsNode,rowId);
	var colId="Col"+rowId;
	if (_currentCheckRow.collaps)
	{
		_currentCheckRow.collaps=false;
		//更改节点的图象
		if (image=="fplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/fminus.gif";
		}
		if(image=="Lplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/Lminus.gif";
		}
		if(image=="Tplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/Tminus.gif";
		}
		if (image=="Rplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/Rminus.gif";
		}
		//展开子节点
		chgRowDisplay(_currentCheckRow,_currentCheckRow.collaps);
		
		//触发expand事件
		var evt=createEventObject();
		_tvevtExpand.fire(evt);
		
	}
	else
	{
		_currentCheckRow.collaps=true;
		
		//更改节点的图象
		if (image=="fplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/fplus.gif";
		}
		if(image=="Lplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/Lplus.gif";
		}
		if(image=="Tplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/Tplus.gif";
		}
		if (image=="Rplus")
		{
			document.all(colId).src=TreeListViewHandler.imageUrl+"/Rplus.gif";
		}
		//隐藏子节点
		chgRowDisplay(_currentCheckRow,_currentCheckRow.collaps);
		
		//触发collapse事件
		var evt=createEventObject();
		_tvevtCollapse.fire(evt);
	}
}

/*************************************************************************
函数说明：得到高度
函数要求：
输入参数：
	无			
输出参数：
	height
************************************************************************/
function getHeight()
{
	return bodyDiv.height;
}

/*************************************************************************
函数说明：设置高度
函数要求：
输入参数：
	rowId：	行Id
	image：	图象代码		
输出参数：
	无
***************************************************************************/
function setHeight(value)
{
	bodyDiv.style.height=value;
}

/*************************************************************************
函数说明：提取宽度
函数要求：
输入参数：
	无
输出参数：
	无
***************************************************************************/
function getWidth()
{
	return div01.style.width;
}

/*************************************************************************
函数说明：设置宽度
函数要求：
输入参数：
	无	
输出参数：
	无
***************************************************************************/
function setWidth(value)
{
	div01.style.width=value;
	bodyDiv.style.width=value;
	try
	{
		div02.style.width=value-15;
	}
	catch(e)
	{
		div02.style.width=value;
	}
}

/*************************************************************************
函数说明：得到图片路径
函数要求：
输入参数：
	无		
输出参数：
	height
************************************************************************/

function getImagesUrl()
{
	return TreeListViewHandler.imageUrl;
}

/*************************************************************************
函数说明：设置图片路径
函数要求：
输入参数：
	无			
输出参数：
	height
************************************************************************/

function setImagesUrl(value)
{
	TreeListViewHandler.imageUrl=value;
}
/*************************************************************************
函数说明：得到当前行的所有子节点
函数要求：
输入参数：
	无	
输出参数：
	_itemsNode.items ：根节点的所有items
************************************************************************/
function getChildren()
{
	return private_getChildren(_itemsNode);
}

/*************************************************************************
函数说明：得到输入节点的各种信息
函数要求：
输入参数：
	node:输入的当前节点	
输出参数：
************************************************************************/
function private_getTreeNode(obj)
{
	//节点添加子节点函数
	obj.add = function(newnode) 
	{ 
		private_add(this,newnode);
	};
	//节点创建子节点函数
	obj.createTreeNode=function()
	{
		var j;
		for(var i=0;i<this.parentNode.items.length;i++)
		{
			j=i;
			if (this.parentNode.items[i]==this)
			{
				j=i;
				break;
			}
		}
		if (j<this.parentNode.items.length-1)
			var index=private_getNodeIndex(this.parentNode.items[j+1]);
		else
			index=private_getNodeIndex(this)+this.items.length+1;
		return private_createTreeNode(this,index);
	};
	
	//得到节点的指定属性值
	obj.getAttribute=function(name)
	{
		return this[name];
	};
	
	//设置节点的指定属性值
	obj.setAttribute = function(name, value) 
	{
		this[name]=value;//修改节点的对应的属性的值
		var m=0;
		
		//修改树表中显示在界面上的值
		for(var i=0;i<g_arrColumnDesc.length;i++)
		{
			if (g_arrColumnDesc[i].propertyName==name)
			{
				if(!g_arrColumnDesc[i].display)
				{
					continue;
				}
				var cel=this.row.cells[m++].children;
				for(var j=0;j<cel.length;j++)
				{
					if (cel[j].tagName=="SPAN")
					{
						cel[j].innerHTML=value;
						break;
					}
				}
			}
		}
	};
	
	//从树表移除该节点
	obj.remove = function() 
	{ 
		private_remove(this);
	};
	
	//设置节点的图象名称
	obj.setImages=function(imageEnter,imageLeave)
	{
		this.imageEnter=imageEnter;
		this.imageLeave=imageLeave;
	};
	
	//得到节点未选中的图象名称
	obj.getLeaveImage=function()
	{
		return this.imageLeave;
	};
	
	//得到节点被选中时的图象名称
	obj.getEnterImage=function()
	{
		return this.imageEnter;
	};
	
	//得到节点的所有子节点
	obj.getChildren = function() 
	{ 
		return private_getChildren(this); 
	};
	
	//判断是否是根节点
	obj.isRootNode=function()
	{
		if (this.parentNode == _itemsNode)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	//得到节点的父节点
	obj.getParent = function()
	{
		if (this.parentNode == null)
			return null;
		else if (this.parentNode == _itemsNode)
			return null;
		else
			return private_getTreeNode(this.parentNode);
	};
	
	//判断该节点是否有下级节点
	obj.expandable=function()
	{
		if (this.items.length>0)
		{
			return true;
		}
		else
		{
			return false;
		}
	};
	
	//判断该节点的下级节点是否被展开
	obj.expanded=function()
	{
		if (this.collaps)
		{
			return false;
		}
		else
		{
			return true;
		}
	}
	
	obj.setExpanded=function(value)
	{
		if (value)
		{
			this.collaps=true;
		}
		else
		{
			this.collaps=false;
		}
		if (this.items.length>0)
		{
			if (this.firstOnlyItem)
			{
				onTreeTableCollaps(this.row.id,"Rplus");
			}
			else if (this.firstNode)
			{
				if (this.parentNode==_itemsNode)
				{
					onTreeTableCollaps(this.row.id,"fplus");
				}
				else
				{
					onTreeTableCollaps(this.row.id,"Tplus");
				}
			}
			else if (this.lastNode)
			{
				onTreeTableCollaps(this.row.id,"Lplus");
			}
			else
			{
				onTreeTableCollaps(this.row.id,"Tplus");
			}
		}
	}
	
	//设置行被选中
	obj.setSelected=function()
	{
		_oldRow=_currentRow;//备份当前记录到_oldRow
		//alert(_oldRow.row.id+" "+_currentRow.row.id+" "+this.row.id);
		_currentRow=this;
		var row=this.row;
		
		//判断是否需要触发onselectedindexchange事件
		if ((_oldRow!=null) && (_oldRow!=_currentRow))
		{
			_oldRow.selected=false;
			_currentRow.selected=true;
			_oldRow.row.style.backgroundColor =_oldRow.bgColor;
			row.style.backgroundColor =TreeListViewHandler.bgColor;
		}
	}
	
	//设置行别选中，并且选中行发生变动
	obj.setSelectedChange=function()
	{
		_oldRow=_currentRow;//备份当前记录到_oldRow
		//alert(_oldRow.row.id+" "+_currentRow.row.id+" "+this.row.id);
		_currentRow=this;
		var row=this.row;
		
		//判断是否需要触发onselectedindexchange事件
		if ((_oldRow!=null) && (_oldRow!=_currentRow))
		{
			_oldRow.selected=false;
			_currentRow.selected=true;
			_oldRow.row.style.backgroundColor =_oldRow.bgColor;
			row.style.backgroundColor =TreeListViewHandler.bgColor;
			
			var evt=createEventObject();
			_onIndexChange.fire(evt);
		}
	}
	obj.refresh=function()
	{
		if (_itemsNode.items.length>0)
		{
			this.parentNode.collaps=false;
			if (this.parentNode!=_itemsNode)
				showNodeData(this.parentNode);	
			createRowNodeText(this.parentNode);
			chgRowDisplay(this.parentNode,this.parentNode.collaps);
		}
	}
	
	//改变指定行的背景色
	obj.setBgColor=function(value)
	{
		this.bgColor=value;
		if (this.selected==false)
		{
			this.row.style.backgroundColor=value;
		}
	}
	
	//改变指定行的字体颜色
	obj.setFontColor=function(value)
	{
		this.fontColor=value;
		this.row.style.color=value;
	}
	
	return obj;
}

/*************************************************************************
函数说明：得到输入节点的所有子节点信息
函数要求：
输入参数：
	node:输入的当前节点	
输出参数：
************************************************************************/
function private_getChildren(node)
{
	var arr=new Array();
	for(var i=0;i<node.items.length;i++)
	{
		arr[i]=private_getTreeNode(node.items[i]);
	}
	return arr;
}

/*************************************************************************
函数说明：将输入的node节点信息添加到指定的parentNode父节点中
函数要求：将添加的新行加入到指定的父节点的末尾，并且修改相应的图片的显示方式
输入参数：
	node:		输入的添加节点
	parentRowNode：输入的父节点		
输出参数：
************************************************************************/
function private_add(parentRowNode,node)
{
	//由于子节点数由0变为1，因此节点图标也要变
	if (parentRowNode.items.length>=1)
	{
		parentRowNode.collaps=false;
		if (parentRowNode!=_itemsNode)
			showNodeData(parentRowNode);
		else
		{
			if (_currentRow==null)
			{
				_oldRow=_currentRow=node;
				node.selected=true;	
			}
		}
	}
}

/*************************************************************************
函数说明：在根节点下创建一个节点
函数要求：
输入参数：
	无	
输出参数：
	
************************************************************************/
function createTreeNode()
{
	//创建行的时候必须指定行的列数
	var index=_tbValues_.rows.length;
	return private_createTreeNode(_itemsNode,index);
}

/*************************************************************************
函数说明：创建一个节点
函数要求：
输入参数：
	无
输出参数：
	realNode：创建的节点
************************************************************************/
function private_createTreeNode(parentNode,index)
{
	var realNode = new Object();
	parentNode.items[parentNode.items.length]=realNode;
	var row=_tbValues_.insertRow(index);
	row.id = "row"+TreeListViewHandler.getUniqueID();
	row.onclick=rowClick;
	row.oncontextmenu=rowOnContextMenu;
	var cell=null;
	
	for(var i=0;i<g_arrColumnDesc.length;i++)
	{
		realNode[g_arrColumnDesc[i].propertyName]="";
		if(!g_arrColumnDesc[i].display)
		{
			continue;
		}
		cell = row.insertCell();
		cell.innerHTML="<span></span>";
		
		if(g_arrColumnDesc[i].width!=null)
			cell.width = g_arrColumnDesc[i].width;
		cell.height="15";
	}
	realNode.row=row;
	realNode.imageEnter=TreeListViewHandler.imageEnter;
	realNode.imageLeave=TreeListViewHandler.imageLeave;
	realNode.parentNode=parentNode;
	realNode.bgColor=TreeListViewHandler.frontColor;
	realNode.items = new Array();
	return private_getTreeNode(realNode);
}

/*************************************************************************
函数说明：根据输入的节点得到在节点表中的位置
函数要求：
输入参数：
	node：输入的节点
输出参数：
	index：节点所在的行数
************************************************************************/
function private_getNodeIndex(node)
{
	var index=0;
	for(var i=0;i<_tbValues_.rows.length;i++)
	{
		if (_tbValues_.rows[i].id==node.row.id)
		{
			index=i;
			break;
		}
	}
	return index;
}

/*************************************************************************
函数说明：提取选中的行记录
函数要求：
输入参数：
	无				
输出参数：
	_currentRow：选中的行
************************************************************************/
function getSelectedItem()
{
	if (_currentRow==null)
		return null;
	return private_getTreeNode(_currentRow);
}

/*************************************************************************
函数说明：删除输入的行记录
函数要求：要求界面重新排版
输入参数：
	无			
输出参数：
	无
************************************************************************/
function private_remove(node)
{
	var j;
	//提取对象数组记录中的指定行，并删除
	for(var i=0;i<node.parentNode.items.length;i++)
	{
		if (node.parentNode.items[i]==node)
		{
			j=i;
			break;
		}
	}
	
	//清空旧记录
	if (_oldRow==node)
	{
		_oldRow=null;
	}
	
	node.selected=false;
	node.parentNode.items.splice(j,1);
	if (_currentRow==node)
	{
		_currentRow=null;
		if ((node.parentNode==_itemsNode) &&(node.parentNode.items.length>0))
		{
			node.parentNode.items[0].selected=true;
			_currentRow=node.parentNode.items[0];
		}
		else if (node.parentNode!=_itemsNode)
		{
			node.parentNode.selected=true;
			_currentRow=node.parentNode;
		}
	}
	//提取表格中的指定行位置，并删除
	for(var i=0;i<_tbValues_.rows.length;i++)
	{
		if (_tbValues_.rows[i]==node.row)
		{
			j=i;
			break;
		}
	}
	_tbValues_.deleteRow(j);
}

/*************************************************************************
函数说明：得到onselectedIndexChange事件前的记录
函数要求：要求Index改变
输入参数：
	无				
输出参数：
	_oldRow:旧记录
************************************************************************/
function getOldItem()
{
	if (_oldRow!=null)
	{
		return private_getTreeNode(_oldRow);
	}
	else
	{
		return null;
	}
}

/*************************************************************************
函数说明：得到onselectedIndexChange事件前的记录
函数要求：要求Index改变
输入参数：
	无				
输出参数：
	_currentRow:当前记录
************************************************************************/
function getNewItem()
{
	if (_currentRow!=null)
	{
		private_getTreeNode(_currentRow);
	}
	else
	{
		return null;
	}
}

/*************************************************************************
函数说明：将新生成的节点添加到根节点下的方法
函数要求：
输入参数：
	newNode：新生成的节点				
输出参数：
	无
************************************************************************/
function add(newNode)
{
	private_add(_itemsNode,newNode);
}

/*************************************************************************
函数说明：得到树表所有节点的个数
函数要求：
输入参数：
	无				
输出参数：
	_tbValues_.rows.length：表的行数，也就是所有节点的总个数
************************************************************************/
function getItemsLength()
{
	return _tbValues_.rows.length;
}

/*************************************************************************
函数说明：当鼠标在表头上面移动时触发的事件函数
函数要求：
输入参数：
	无				
输出参数：
	无
************************************************************************/
function _onHeadMousemove()
{
	var oEl = event.srcElement;
	splitLine.style.left = event.x;
	if(_splitlocked) return;
	if(!_ifSplitLocation(oEl))return;
}

/*************************************************************************
函数说明：判断是否需要更改鼠标的显示形状,并根据需要进行修改
函数要求：
输入参数：
	oEl:触发事件的对象				
输出参数：
	无
************************************************************************/
function _ifSplitLocation(oEl){
	if(oEl.tagName == "BUTTON")oEl = oEl.parentElement;
	if(oEl.tagName == "TD"){
		if(Math.abs(event.offsetX - oEl.clientWidth) <= 5){
			_curResizeTD = oEl;
			_setCursor('col-resize');
		}
		else if (Math.abs(event.offsetX) <= 5 && oEl.cellIndex>0){
			if(oEl.cellIndex>0){
				_curResizeTD = oEl.parentElement.cells(oEl.cellIndex-1);
				_setCursor('col-resize');
			}
		}
		else{
			_setCursor('default');
			_curResizeTD = null;			
			return false;
		}
	}
	return true;
}

/*************************************************************************
函数说明：设置鼠标的形状
函数要求：
输入参数：
	crs:需要设置的鼠标的显示形状的值				
输出参数：
	无
************************************************************************/
function _setCursor(crs)
{
	try
	{
		element.style.cursor=crs;
		if(_curResizeTD!=null)_curResizeTD.children(0).style.cursor=crs;
	}
	catch(e)
	{
	}
}

/*************************************************************************
函数说明：当鼠标离开时触发的事件函数
函数要求：
输入参数：
	无				
输出参数：
	无
************************************************************************/
function _onHeadMouseleave()
{
	;		
}

/*************************************************************************
函数说明：当鼠标点击按下时触发的事件函数
函数要求：
输入参数：
	无				
输出参数：
	无
************************************************************************/
function _onHeadMousedown()
{
	var oEl = event.srcElement;
	var oldEl=event.srcElement;
	if(!_ifSplitLocation(oEl)) return;
	splitLine.style.display = "";
	_splitlocked  = true;
}

/*************************************************************************
函数说明：当鼠标点击放开时触发的事件函数
函数要求：
输入参数：
	无				
输出参数：
	无
************************************************************************/
function _onHeadMouseup()
{
	splitLine.style.display = "none";
	_splitlocked  = false;
	_setCursor('default');
	if(_curResizeTD == null) return;
	var otd = _curResizeTD;
	var otdLeft = _getLeft(otd);
	var otdwidth =  splitLine.style.pixelLeft - otdLeft;
	if(otdwidth < 0) return;
	var c_idx=parseInt(otd.celIndex);
	otd.width = otdwidth;
	_tbValues_.rows[0].cells[c_idx].width=otdwidth;
}

/*************************************************************************
函数说明：得到输入控件的左边坐标位置
函数要求：
输入参数：
	e:输入控件				
输出参数：
	l:控件e的左边坐标位置
************************************************************************/
function _getLeft(e)
{
	var l=e.offsetLeft;
	while(e=e.offsetParent)
	{
		l+=e.offsetLeft;
	}
	return l;
}

/*************************************************************************
函数说明：返回根节点的父节点
函数要求：要求返回为空
输入参数：
	无
输出参数：
	无
***************************************************************************/
function getParent()
{
	return null;
}

/*************************************************************************
函数说明：对控件进行刷新
函数要求：
输入参数：
	无
输出参数：
	无
***************************************************************************/
function refresh()
{
	if (_itemsNode.items.length>0)
	{
		var node=_itemsNode.items[0];
		if (node.parentNode!=_itemsNode)
			showNodeData(node.parentNode);	
		createRowNodeText(node.parentNode);
		chgRowDisplay(node.parentNode,node.parentNode.collaps);
	}
}

/*************************************************************************
函数说明：当键盘按下时触发的事件
函数要求：要求响应上下鼠标键
输入参数：
	无
输出参数：
	无
***************************************************************************/
function eonkeydown()
{
	
	if(event.keyCode==38)
	{
		moveUp();
	}
	if(event.keyCode==40)
	{
		moveDown();
	}
}

/*************************************************************************
函数说明：当鼠标键向上移动时触发的事件
函数要求：要求响应上移鼠标键
输入参数：
	无
输出参数：
	无
***************************************************************************/
function moveUp()
{
	var index=parseInt(_currentRow.row.id.replace("row",""),10);
	var indexFirst=parseInt(_tbValues_.rows[0].id.replace("row",""),10);
	var selInd=-1;
	for(var i=index-1-indexFirst;i>-1;i--)
	{
		if (_tbValues_.rows[i].style.display=="")
		{
			selInd=i;
			break;
		}
	}
	if (selInd==-1)
	{
		return true;
	}
	
	_oldRow=_currentRow;//备份当前记录到_oldRow
	
	var row=_tbValues_.rows[selInd];
	
	//得到当前所在行所在的index位置
	_currentRow=getItemIndexByRowId(_itemsNode,row.id);
	
	//判断是否需要触发onselectedindexchange事件
	if ((_oldRow!=null) && (_oldRow!=_currentRow))
	{
		_oldRow.selected=false;
		_currentRow.selected=true;
		_oldRow.row.style.backgroundColor =_oldRow.bgColor;
		row.style.backgroundColor =TreeListViewHandler.bgColor;

		var evt=createEventObject();
		_onIndexChange.fire(evt);
	}
}

/*************************************************************************
函数说明：当鼠标键向下移动时触发的事件
函数要求：要求响应下移鼠标键
输入参数：
	无
输出参数：
	无
***************************************************************************/
function moveDown()
{
	var index=parseInt(_currentRow.row.id.replace("row",""),10);
	var indexFirst=parseInt(_tbValues_.rows[0].id.replace("row",""),10);
	var selInd=-1;
	for(var i=index+1-indexFirst;i<_tbValues_.rows.length;i++)
	{
		if (_tbValues_.rows[i].style.display=="")
		{
			selInd=i;
			break;
		}
	}
	if (selInd==-1)
	{
		return true;
	}
	
	_oldRow=_currentRow;//备份当前记录到_oldRow
	
	var row=_tbValues_.rows[selInd];
	
	//得到当前所在行所在的index位置
	_currentRow=getItemIndexByRowId(_itemsNode,row.id);
	
	//判断是否需要触发onselectedindexchange事件
	if ((_oldRow!=null) && (_oldRow!=_currentRow))
	{
		_oldRow.selected=false;
		_currentRow.selected=true;
		_oldRow.row.style.backgroundColor =_oldRow.bgColor;
		row.style.backgroundColor =TreeListViewHandler.bgColor;
		
		var evt=createEventObject();
		_onIndexChange.fire(evt);
	}
}

/*************************************************************************
函数说明：当bodyDiv的滚动条左右移动时div02也跟着左右移动
函数要求：
输入参数：
	无
输出参数：
	无
***************************************************************************/
function _scroll()
{
	div02.scrollLeft = bodyDiv.scrollLeft;
	evt=createEventObject();
	_onscroll.fire(evt);
}

/*************************************************************************
函数说明：当鼠标移动到_tbValues_上面的时候鼠标的行状变为跟普通相同
函数要求：
输入参数：
	无
输出参数：
	无
***************************************************************************/
function bodyTblMove()
{
	_setCursor('default');
	_curResizeTD = null;
}

/*************************************************************************
函数说明：使竖向滚动条滚动到底部
函数要求：
输入参数：
	无
输出参数：
	无
***************************************************************************/
function setScrollToLine(value)
{
	//bodyDiv.scrollTop=bodyDiv.scrollHeight-bodyDiv.clientHeight;
	var lineHeigth=bodyDiv.scrollHeight/_tbValues_.rows.length;
	bodyDiv.scrollTop=lineHeigth*(value-1);
}

/*************************************************************************
函数说明：设置图片的样式
函数要求：
输入参数：
	value：输入的样式值
输出参数：
	无
***************************************************************************/
function setImgStyle(value)
{
	_imgStyle=value;
}

/*************************************************************************
函数说明：响应Div的右键功能
函数要求：
输入参数：
	无
输出参数：
	无
***************************************************************************/
function divContextMenu()
{
	if (chkClk==false)
	{
		var evt=createEventObject();
		_divContextMenu.fire(evt);
	}
	chkClk=false;
}

function hrefClick(str)
{
	eval(str);
}

function setShowHead(value)
{
	if (value==true || value=="true")
	{
		_showHead=true;
	}
	else
	{
		_showHead=false;
	}
}

function getShowHead()
{
	return _showHead;
}

function clkMouseOver(spanId)
{
	document.all(spanId).style.cursor='hand';
	document.all(spanId).style.color='blue';
}

function clkMouseLeave(spanId)
{
	document.all(spanId).style.color='black';
}
</script>